{"version":3,"sources":["atoms/Image.tsx","templates/FlexTemplate.tsx","molecules/Card.tsx","atoms/Loader.tsx","atoms/Button.tsx","atoms/NavBar.tsx","pages/Home.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.js","index.tsx"],"names":["Image","height","width","rounded","href","downloadHref","target","download","style","zIndex","border","background","color","position","padding","viewBox","fill","d","src","borderRadius","memo","FlexTemplate","children","className","Card","Loader","margin","display","alignItems","justifyContent","Button","textcolor","backgroundcolor","text","onclick","backgroundColor","borderTopLeftRadius","borderBottomLeftRadius","outline","cursor","onClick","NavBar","dataToGet","useState","data","changeData","type","placeholder","onChange","e","currentTarget","value","paddingLeft","Home","newData","urlFetch","changeURLFetch","searchString","ChangeSearchString","CLIENT_ID","process","URL","SearchUrl","useSWR","refreshInterval","clbck","useCallback","useEffect","results","map","i","urls","regular","links","App","fetcher","url","axios","then","res","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f2480f29.chunk.js","sourcesContent":["import React,{memo} from 'react'\nimport Button from './Button'\ntype imageProps={\n    height:number;\n    width:number;\n    rounded?:boolean;\n    href:string;\n    downloadHref?:string;\n}\nconst Image = ({\n    height,\n    width,\n    rounded=false,\nhref,\ndownloadHref\n}:imageProps)=>{\n    return(\n<div>\n<a href={`${downloadHref}?force=\"true\"`} target=\"_blank\" download>\n    <button style={{zIndex:8,border:\"none\",background:'black',color:\"white\",position:\"absolute\",padding:'5px'}}>\n    <svg height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"white\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M13 5v6h1.17L12 13.17 9.83 11H11V5h2m2-2H9v6H5l7 7 7-7h-4V3zm4 15H5v2h14v-2z\"/></svg>\n    </button>\n    </a>\n    <a href={downloadHref} target=\"_blank\" download>\n    <img src={href} style={{height:`${height}px`, width:`${width}px`, borderRadius:`${rounded ? 50 : 0}%`}}/>\n    </a>\n\n</div>)\n}\n\nexport default memo(Image);","import {memo, ReactNode} from 'react'\nimport './FlexTemplate.css';\ntype templateProps={\n    children : ReactNode \n}\nconst FlexTemplate = memo(({children}:templateProps)=>{\n    return(\n        <div className=\"mainDiv\">\n            {children}\n        </div>\n    )\n\n})\n\nexport default FlexTemplate;","import { memo, ReactNode } from 'react'\ntype cardProps={\n    height?:number,\n    width?:number,\n    background?:string,\n    children:ReactNode\n}\nconst Card = ({\n    height=270,\n    width=190,\n    children\n}:cardProps)=>{\n    return(\n        <div style={{height:`${height}px`,width:`${width}px`}} className=\"card--div\">\n           {children}\n        </div>\n    )\n}\nexport default memo(Card);","const Loader=()=>{\nreturn(\n    <div style={{margin:'0 auto', display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}>\n        <h4 style={{color:'black'}}>Loading...</h4>\n    </div>\n)\n\n}\nexport default Loader;","import { memo } from \"react\";\n\ntype buttonProps={\n    width?:number;\n    height?:number;\n    rounded?:boolean;\n    textcolor?:string;\n\tbackgroundcolor?:string;\n    text:string;\n    onclick?:()=>void;\n}\n\nconst Button = (\n    {width = 130,\n        height = 50,\n        rounded = true,  \n        textcolor = 'white',\n\t\tbackgroundcolor='black',\n        text,\n\t\tonclick\n\t}:buttonProps)=>{\n    return(<div>\n        <button \n        style={{height:`${height}px`,\n        width:`${width}px`,\n       backgroundColor:backgroundcolor,\n        color:textcolor, \n\t\tborder:'1px solid grey' , \n        borderRadius : `${rounded ? 5 : 0}px`,\n        borderTopLeftRadius:0,\n        borderBottomLeftRadius:0,\n        \n\t\toutline:'none',\n        cursor:'pointer'}}\n\t\tonClick={onclick}\n\t\t>\n            {text}\n        </button>\n    </div>)\n\n}\n\nexport default memo(Button);","import {useState,memo} from 'react';\n\nimport Button from './Button';\ntype childProps={\ndataToGet:Function;\n\n}\nconst NavBar = ({dataToGet}:childProps) =>{\n    const [data,changeData]=useState<string>();\n    const captureData=(e: React.FormEvent<HTMLInputElement>)=>{  \n        changeData(e.currentTarget.value);\n     }\n\nreturn(\n    <div className=\"navBar--nav\">\n\n        <h1 className=\"navBar--a\">Photo-Pie</h1>\n    <div className=\"navbar--search\">\n        <input type=\"text\" placeholder=\"Search\" onChange={captureData} style={{paddingLeft:10}}/>\n        <Button text=\"Search\" onclick={()=>dataToGet(data)}/>\n    </div>\n    </div>\n)\n}\n\nexport default memo(NavBar);","import {useState,memo,useEffect,useCallback} from 'react'\nimport './Home.css'\nimport useSWR from 'swr';\nimport Image from '../atoms/Image';\nimport FlexTemplate from '../templates/FlexTemplate';\nimport Card from '../molecules/Card';\nimport Loader from '../atoms/Loader';\nimport NavBar from '../atoms/NavBar';\n\n\nconst Home = memo(()=>{\n  const [newData,changeData]=useState<any>([]);\n  const [urlFetch,changeURLFetch]=useState<boolean>(false);\n  const [searchString,ChangeSearchString]=useState<string>();\n    const CLIENT_ID = process.env.REACT_APP_API_KEY;\n    const URL = `https://api.unsplash.com/photos?page=1&per_page=30&client_id=${CLIENT_ID}`\n    const SearchUrl=`https://api.unsplash.com/search/photos?page=1&per_page=90&query=${searchString}&client_id=${CLIENT_ID}`\n\n    //fetch a certain url based on the requirements\n    const {data} = useSWR(urlFetch?SearchUrl:URL,{\n        refreshInterval: 1000 * 360 *30, \n      });\n\n//callback  from the child to get the search string \n      const clbck=useCallback((searchString:string)=>{\n        changeURLFetch(true);\n        ChangeSearchString(searchString);\n      },[searchString])\n\n      //use effect to check the data\n    useEffect(()=>{\n       changeData(data);\n        },[data,changeURLFetch]) \n\n//show a loader if there is no data available\n    if(!data){\n          return (<>\n           <NavBar dataToGet={clbck}/>\n          <Loader/></>)\n        }\n\nreturn(\n  <>\n <NavBar  dataToGet={clbck}/>\n<FlexTemplate>\n{data && urlFetch ?newData?.results.map((i: { urls: { regular: string; }; links: { download: string | undefined; }; })=>(\n    <Card>\n    <Image href={i.urls.regular} height={300} width={300} downloadHref={i.links.download}/>\n    </Card>\n)):newData?.map((i: { urls: { regular: string; }; links: { download: string | undefined; }; })=>(\n  <Card>\n  <Image href={i.urls.regular} height={300} width={300} downloadHref={i.links.download}/>\n  </Card>))}\n</FlexTemplate>\n</>\n);\n})\nexport default memo(Home);","import Home from './pages/Home';\nimport  { SWRConfig } from 'swr'\nimport axios from 'axios';\n\nfunction App() {\n\n  const fetcher = (url:string)=>axios(url).then(res=>res.data);\n  return (\n    <>\n     <SWRConfig value={{ fetcher }}>\n\n<Home />\n</SWRConfig>\n</>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}