{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}; // TODO: use @ts-expect-error\n\n\nimport { useCallback, useContext, useState, useRef, useMemo, useDebugValue } from 'react';\nimport defaultConfig, { cache } from './config';\nimport { IS_SERVER, rAF, useIsomorphicLayoutEffect } from './env';\nimport SWRConfigContext from './swr-config-context'; // global state managers\n\nvar CONCURRENT_PROMISES = {};\nvar CONCURRENT_PROMISES_TS = {};\nvar FOCUS_REVALIDATORS = {};\nvar RECONNECT_REVALIDATORS = {};\nvar CACHE_REVALIDATORS = {};\nvar MUTATION_TS = {};\nvar MUTATION_END_TS = {}; // generate strictly increasing timestamps\n\nvar now = function () {\n  var ts = 0;\n  return function () {\n    return ++ts;\n  };\n}(); // setup DOM events listeners for `focus` and `reconnect` actions\n\n\nif (!IS_SERVER) {\n  var revalidate_1 = function (revalidators) {\n    if (!defaultConfig.isDocumentVisible() || !defaultConfig.isOnline()) return;\n\n    for (var key in revalidators) {\n      if (revalidators[key][0]) revalidators[key][0]();\n    }\n  };\n\n  if (typeof defaultConfig.registerOnFocus === 'function') {\n    defaultConfig.registerOnFocus(function () {\n      return revalidate_1(FOCUS_REVALIDATORS);\n    });\n  }\n\n  if (typeof defaultConfig.registerOnReconnect === 'function') {\n    defaultConfig.registerOnReconnect(function () {\n      return revalidate_1(RECONNECT_REVALIDATORS);\n    });\n  }\n}\n\nvar trigger = function (_key, shouldRevalidate) {\n  if (shouldRevalidate === void 0) {\n    shouldRevalidate = true;\n  } // we are ignoring the second argument which correspond to the arguments\n  // the fetcher will receive when key is an array\n\n\n  var _a = cache.serializeKey(_key),\n      key = _a[0],\n      keyErr = _a[2],\n      keyValidating = _a[3];\n\n  if (!key) return Promise.resolve();\n  var updaters = CACHE_REVALIDATORS[key];\n\n  if (key && updaters) {\n    var currentData = cache.get(key);\n    var currentError = cache.get(keyErr);\n    var currentIsValidating = cache.get(keyValidating);\n    var promises = [];\n\n    for (var i = 0; i < updaters.length; ++i) {\n      promises.push(updaters[i](shouldRevalidate, currentData, currentError, currentIsValidating, i > 0));\n    } // return new updated value\n\n\n    return Promise.all(promises).then(function () {\n      return cache.get(key);\n    });\n  }\n\n  return Promise.resolve(cache.get(key));\n};\n\nvar broadcastState = function (key, data, error, isValidating) {\n  var updaters = CACHE_REVALIDATORS[key];\n\n  if (key && updaters) {\n    for (var i = 0; i < updaters.length; ++i) {\n      updaters[i](false, data, error, isValidating);\n    }\n  }\n};\n\nvar mutate = function (_key, _data, shouldRevalidate) {\n  if (shouldRevalidate === void 0) {\n    shouldRevalidate = true;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, key, keyErr, beforeMutationTs, beforeConcurrentPromisesTs, data, error, isAsyncMutation, err_1, shouldAbort, updaters, promises, i;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = cache.serializeKey(_key), key = _a[0], keyErr = _a[2];\n          if (!key) return [2\n          /*return*/\n          ]; // if there is no new data to update, let's just revalidate the key\n\n          if (typeof _data === 'undefined') return [2\n          /*return*/\n          , trigger(_key, shouldRevalidate) // update global timestamps\n          ]; // update global timestamps\n\n          MUTATION_TS[key] = now() - 1;\n          MUTATION_END_TS[key] = 0;\n          beforeMutationTs = MUTATION_TS[key];\n          beforeConcurrentPromisesTs = CONCURRENT_PROMISES_TS[key];\n          isAsyncMutation = false;\n\n          if (_data && typeof _data === 'function') {\n            // `_data` is a function, call it passing current cache value\n            try {\n              _data = _data(cache.get(key));\n            } catch (err) {\n              // if `_data` function throws an error synchronously, it shouldn't be cached\n              _data = undefined;\n              error = err;\n            }\n          }\n\n          if (!(_data && typeof _data.then === 'function')) return [3\n          /*break*/\n          , 5]; // `_data` is a promise\n\n          isAsyncMutation = true;\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , _data];\n\n        case 2:\n          data = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          err_1 = _b.sent();\n          error = err_1;\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          data = _data;\n          _b.label = 6;\n\n        case 6:\n          shouldAbort = function () {\n            // check if other mutations have occurred since we've started this mutation\n            if (beforeMutationTs !== MUTATION_TS[key] || beforeConcurrentPromisesTs !== CONCURRENT_PROMISES_TS[key]) {\n              if (error) throw error;\n              return true;\n            }\n          }; // if there's a race we don't update cache or broadcast change, just return the data\n\n\n          if (shouldAbort()) return [2\n          /*return*/\n          , data];\n\n          if (typeof data !== 'undefined') {\n            // update cached data\n            cache.set(key, data);\n          } // always update or reset the error\n\n\n          cache.set(keyErr, error); // reset the timestamp to mark the mutation has ended\n\n          MUTATION_END_TS[key] = now() - 1;\n\n          if (!isAsyncMutation) {\n            // we skip broadcasting if there's another mutation happened synchronously\n            if (shouldAbort()) return [2\n            /*return*/\n            , data];\n          }\n\n          updaters = CACHE_REVALIDATORS[key];\n\n          if (updaters) {\n            promises = [];\n\n            for (i = 0; i < updaters.length; ++i) {\n              promises.push(updaters[i](!!shouldRevalidate, data, error, undefined, i > 0));\n            } // return new updated value\n\n\n            return [2\n            /*return*/\n            , Promise.all(promises).then(function () {\n              if (error) throw error;\n              return cache.get(key);\n            })];\n          } // throw error or return data to be used by caller of mutate\n\n\n          if (error) throw error;\n          return [2\n          /*return*/\n          , data];\n      }\n    });\n  });\n};\n\nfunction useSWR() {\n  var _this = this;\n\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var _key = args[0];\n  var config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), args.length > 2 ? args[2] : args.length === 2 && typeof args[1] === 'object' ? args[1] : {}); // in typescript args.length > 2 is not same as args.lenth === 3\n  // we do a safe type assertion here\n  // args.length === 3\n\n  var fn = args.length > 2 ? args[1] : args.length === 2 && typeof args[1] === 'function' ? args[1] :\n  /**\n      pass fn as null will disable revalidate\n      https://paco.sh/blog/shared-hook-state-with-swr\n    */\n  args[1] === null ? args[1] : config.fetcher; // we assume `key` as the identifier of the request\n  // `key` can change but `fn` shouldn't\n  // (because `revalidate` only depends on `key`)\n  // `keyErr` is the cache key for error objects\n\n  var _a = cache.serializeKey(_key),\n      key = _a[0],\n      fnArgs = _a[1],\n      keyErr = _a[2],\n      keyValidating = _a[3];\n\n  var configRef = useRef(config);\n  useIsomorphicLayoutEffect(function () {\n    configRef.current = config;\n  });\n\n  var willRevalidateOnMount = function () {\n    return config.revalidateOnMount || !config.initialData && config.revalidateOnMount === undefined;\n  };\n\n  var resolveData = function () {\n    var cachedData = cache.get(key);\n    return typeof cachedData === 'undefined' ? config.initialData : cachedData;\n  };\n\n  var resolveIsValidating = function () {\n    return !!cache.get(keyValidating) || key && willRevalidateOnMount();\n  };\n\n  var initialData = resolveData();\n  var initialError = cache.get(keyErr);\n  var initialIsValidating = resolveIsValidating(); // if a state is accessed (data, error or isValidating),\n  // we add the state to dependencies so if the state is\n  // updated in the future, we can trigger a rerender\n\n  var stateDependencies = useRef({\n    data: false,\n    error: false,\n    isValidating: false\n  });\n  var stateRef = useRef({\n    data: initialData,\n    error: initialError,\n    isValidating: initialIsValidating\n  }); // display the data label in the React DevTools next to SWR hooks\n\n  useDebugValue(stateRef.current.data);\n  var rerender = useState({})[1];\n  var dispatch = useCallback(function (payload) {\n    var shouldUpdateState = false;\n\n    for (var k in payload) {\n      // @ts-ignore\n      if (stateRef.current[k] === payload[k]) {\n        continue;\n      } // @ts-ignore\n\n\n      stateRef.current[k] = payload[k]; // @ts-ignore\n\n      if (stateDependencies.current[k]) {\n        shouldUpdateState = true;\n      }\n    }\n\n    if (shouldUpdateState) {\n      // if component is unmounted, should skip rerender\n      // if component is not mounted, should skip rerender\n      if (unmountedRef.current || !initialMountedRef.current) return;\n      rerender({});\n    }\n  }, // config.suspense isn't allowed to change during the lifecycle\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []); // error ref inside revalidate (is last request errored?)\n\n  var unmountedRef = useRef(false);\n  var keyRef = useRef(key); // check if component is mounted in suspense mode\n\n  var initialMountedRef = useRef(false); // do unmount check for callbacks\n\n  var eventsCallback = useCallback(function (event) {\n    var _a;\n\n    var params = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      params[_i - 1] = arguments[_i];\n    }\n\n    if (unmountedRef.current) return;\n    if (!initialMountedRef.current) return;\n    if (key !== keyRef.current) return; // @ts-ignore\n\n    (_a = configRef.current)[event].apply(_a, params);\n  }, [key]);\n  var boundMutate = useCallback(function (data, shouldRevalidate) {\n    return mutate(keyRef.current, data, shouldRevalidate);\n  }, []);\n\n  var addRevalidator = function (revalidators, callback) {\n    if (!revalidators[key]) {\n      revalidators[key] = [callback];\n    } else {\n      revalidators[key].push(callback);\n    }\n\n    return function () {\n      var keyedRevalidators = revalidators[key];\n      var index = keyedRevalidators.indexOf(callback);\n\n      if (index >= 0) {\n        // O(1): faster than splice\n        keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n        keyedRevalidators.pop();\n      }\n    };\n  }; // start a revalidation\n\n\n  var revalidate = useCallback(function (revalidateOpts) {\n    if (revalidateOpts === void 0) {\n      revalidateOpts = {};\n    }\n\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, retryCount, _b, dedupe, loading, shouldDeduping, newData, startAt, newState, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!key || !fn) return [2\n            /*return*/\n            , false];\n            if (unmountedRef.current) return [2\n            /*return*/\n            , false];\n            if (configRef.current.isPaused()) return [2\n            /*return*/\n            , false];\n            _a = revalidateOpts.retryCount, retryCount = _a === void 0 ? 0 : _a, _b = revalidateOpts.dedupe, dedupe = _b === void 0 ? false : _b;\n            loading = true;\n            shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && dedupe;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 6,, 7]);\n\n            dispatch({\n              isValidating: true\n            });\n            cache.set(keyValidating, true);\n\n            if (!shouldDeduping) {\n              // also update other hooks\n              broadcastState(key, stateRef.current.data, stateRef.current.error, true);\n            }\n\n            newData = void 0;\n            startAt = void 0;\n            if (!shouldDeduping) return [3\n            /*break*/\n            , 3]; // there's already an ongoing request,\n            // this one needs to be deduplicated.\n\n            startAt = CONCURRENT_PROMISES_TS[key];\n            return [4\n            /*yield*/\n            , CONCURRENT_PROMISES[key]];\n\n          case 2:\n            newData = _c.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            // if no cache being rendered currently (it shows a blank page),\n            // we trigger the loading slow event.\n            if (config.loadingTimeout && !cache.get(key)) {\n              setTimeout(function () {\n                if (loading) eventsCallback('onLoadingSlow', key, config);\n              }, config.loadingTimeout);\n            }\n\n            if (fnArgs !== null) {\n              CONCURRENT_PROMISES[key] = fn.apply(void 0, fnArgs);\n            } else {\n              CONCURRENT_PROMISES[key] = fn(key);\n            }\n\n            CONCURRENT_PROMISES_TS[key] = startAt = now();\n            return [4\n            /*yield*/\n            , CONCURRENT_PROMISES[key]];\n\n          case 4:\n            newData = _c.sent();\n            setTimeout(function () {\n              delete CONCURRENT_PROMISES[key];\n              delete CONCURRENT_PROMISES_TS[key];\n            }, config.dedupingInterval); // trigger the success event,\n            // only do this for the original request.\n\n            eventsCallback('onSuccess', newData, key, config);\n            _c.label = 5;\n\n          case 5:\n            // if there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            if (CONCURRENT_PROMISES_TS[key] > startAt) {\n              return [2\n              /*return*/\n              , false];\n            } // if there're other mutations(s), overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n\n\n            if (MUTATION_TS[key] && ( // case 1\n            startAt <= MUTATION_TS[key] || // case 2\n            startAt <= MUTATION_END_TS[key] || // case 3\n            MUTATION_END_TS[key] === 0)) {\n              dispatch({\n                isValidating: false\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            cache.set(keyErr, undefined);\n            cache.set(keyValidating, false);\n            newState = {\n              isValidating: false\n            };\n\n            if (typeof stateRef.current.error !== 'undefined') {\n              // we don't have an error\n              newState.error = undefined;\n            }\n\n            if (!config.compare(stateRef.current.data, newData)) {\n              // deep compare to avoid extra re-render\n              // data changed\n              newState.data = newData;\n              cache.set(key, newData);\n            } // merge the new state\n\n\n            dispatch(newState);\n\n            if (!shouldDeduping) {\n              // also update other hooks\n              broadcastState(key, newData, newState.error, false);\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            err_2 = _c.sent();\n            delete CONCURRENT_PROMISES[key];\n            delete CONCURRENT_PROMISES_TS[key];\n\n            if (configRef.current.isPaused()) {\n              dispatch({\n                isValidating: false\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            cache.set(keyErr, err_2); // get a new error\n            // don't use deep equal for errors\n\n            if (stateRef.current.error !== err_2) {\n              // we keep the stale data\n              dispatch({\n                isValidating: false,\n                error: err_2\n              });\n\n              if (!shouldDeduping) {\n                // also broadcast to update other hooks\n                broadcastState(key, undefined, err_2, false);\n              }\n            } // events and retry\n\n\n            eventsCallback('onError', err_2, key, config);\n\n            if (config.shouldRetryOnError) {\n              // when retrying, we always enable deduping\n              eventsCallback('onErrorRetry', err_2, key, config, revalidate, {\n                retryCount: retryCount + 1,\n                dedupe: true\n              });\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            loading = false;\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  }, // dispatch is immutable, and `eventsCallback`, `fnArgs`, `keyErr`, and `keyValidating` are based on `key`,\n  // so we can them from the deps array.\n  //\n  // FIXME:\n  // `fn` and `config` might be changed during the lifecycle,\n  // but they might be changed every render like this.\n  // useSWR('key', () => fetch('/api/'), { suspense: true })\n  // So we omit the values from the deps array\n  // even though it might cause unexpected behaviors.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [key]); // mounted (client side rendering)\n\n  useIsomorphicLayoutEffect(function () {\n    if (!key) return undefined; // after `key` updates, we need to mark it as mounted\n\n    unmountedRef.current = false;\n    var isUpdating = initialMountedRef.current;\n    initialMountedRef.current = true; // after the component is mounted (hydrated),\n    // we need to update the data from the cache\n    // and trigger a revalidation\n\n    var currentHookData = stateRef.current.data;\n    var latestKeyedData = resolveData(); // update the state if the key changed (not the inital render) or cache updated\n\n    keyRef.current = key;\n\n    if (!config.compare(currentHookData, latestKeyedData)) {\n      dispatch({\n        data: latestKeyedData\n      });\n    } // revalidate with deduping\n\n\n    var softRevalidate = function () {\n      return revalidate({\n        dedupe: true\n      });\n    }; // trigger a revalidation\n\n\n    if (isUpdating || willRevalidateOnMount()) {\n      if (typeof latestKeyedData !== 'undefined' && !IS_SERVER) {\n        // delay revalidate if there's cache\n        // to not block the rendering\n        // @ts-ignore it's safe to use requestAnimationFrame in browser\n        rAF(softRevalidate);\n      } else {\n        softRevalidate();\n      }\n    }\n\n    var pending = false;\n\n    var onFocus = function () {\n      if (pending || !configRef.current.revalidateOnFocus) return;\n      pending = true;\n      softRevalidate();\n      setTimeout(function () {\n        return pending = false;\n      }, configRef.current.focusThrottleInterval);\n    };\n\n    var onReconnect = function () {\n      if (configRef.current.revalidateOnReconnect) {\n        softRevalidate();\n      }\n    }; // register global cache update listener\n\n\n    var onUpdate = function (shouldRevalidate, updatedData, updatedError, updatedIsValidating, dedupe) {\n      if (shouldRevalidate === void 0) {\n        shouldRevalidate = true;\n      }\n\n      if (dedupe === void 0) {\n        dedupe = true;\n      } // update hook state\n\n\n      var newState = {};\n      var needUpdate = false;\n\n      if (typeof updatedData !== 'undefined' && !config.compare(stateRef.current.data, updatedData)) {\n        newState.data = updatedData;\n        needUpdate = true;\n      } // always update error\n      // because it can be `undefined`\n\n\n      if (stateRef.current.error !== updatedError) {\n        newState.error = updatedError;\n        needUpdate = true;\n      }\n\n      if (typeof updatedIsValidating !== 'undefined' && stateRef.current.isValidating !== updatedIsValidating) {\n        newState.isValidating = updatedIsValidating;\n        needUpdate = true;\n      }\n\n      if (needUpdate) {\n        dispatch(newState);\n      }\n\n      if (shouldRevalidate) {\n        if (dedupe) {\n          return softRevalidate();\n        } else {\n          return revalidate();\n        }\n      }\n\n      return false;\n    };\n\n    var unsubFocus = addRevalidator(FOCUS_REVALIDATORS, onFocus);\n    var unsubReconnect = addRevalidator(RECONNECT_REVALIDATORS, onReconnect);\n    var unsubUpdate = addRevalidator(CACHE_REVALIDATORS, onUpdate);\n    return function () {\n      // cleanup\n      dispatch = function () {\n        return null;\n      }; // mark it as unmounted\n\n\n      unmountedRef.current = true;\n      unsubFocus();\n      unsubReconnect();\n      unsubUpdate();\n    };\n  }, [key, revalidate]);\n  useIsomorphicLayoutEffect(function () {\n    var timer = null;\n\n    var tick = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(!stateRef.current.error && (configRef.current.refreshWhenHidden || configRef.current.isDocumentVisible()) && (configRef.current.refreshWhenOffline || configRef.current.isOnline()))) return [3\n              /*break*/\n              , 2]; // only revalidate when the page is visible\n              // if API request errored, we stop polling in this round\n              // and let the error retry function handle it\n\n              return [4\n              /*yield*/\n              , revalidate({\n                dedupe: true\n              })];\n\n            case 1:\n              // only revalidate when the page is visible\n              // if API request errored, we stop polling in this round\n              // and let the error retry function handle it\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              // Read the latest refreshInterval\n              if (configRef.current.refreshInterval && timer) {\n                timer = setTimeout(tick, configRef.current.refreshInterval);\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    if (configRef.current.refreshInterval) {\n      timer = setTimeout(tick, configRef.current.refreshInterval);\n    }\n\n    return function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n  }, [config.refreshInterval, config.refreshWhenHidden, config.refreshWhenOffline, revalidate]); // suspense\n\n  var latestData;\n  var latestError;\n\n  if (config.suspense) {\n    // in suspense mode, we can't return empty state\n    // (it should be suspended)\n    // try to get data and error from cache\n    latestData = cache.get(key);\n    latestError = cache.get(keyErr);\n\n    if (typeof latestData === 'undefined') {\n      latestData = initialData;\n    }\n\n    if (typeof latestError === 'undefined') {\n      latestError = initialError;\n    }\n\n    if (typeof latestData === 'undefined' && typeof latestError === 'undefined') {\n      // need to start the request if it hasn't\n      if (!CONCURRENT_PROMISES[key]) {\n        // trigger revalidate immediately\n        // to get the promise\n        // in this revalidate, should not rerender\n        revalidate();\n      }\n\n      if (CONCURRENT_PROMISES[key] && typeof CONCURRENT_PROMISES[key].then === 'function') {\n        // if it is a promise\n        throw CONCURRENT_PROMISES[key];\n      } // it's a value, return it directly (override)\n\n\n      latestData = CONCURRENT_PROMISES[key];\n    }\n\n    if (typeof latestData === 'undefined' && latestError) {\n      // in suspense mode, throw error if there's no content\n      throw latestError;\n    }\n  } // define returned state\n  // can be memorized since the state is a ref\n\n\n  var memoizedState = useMemo(function () {\n    // revalidate will be deprecated in the 1.x release\n    // because mutate() covers the same use case of revalidate().\n    // This remains only for backward compatibility\n    var state = {\n      revalidate: revalidate,\n      mutate: boundMutate\n    };\n    Object.defineProperties(state, {\n      error: {\n        // `key` might be changed in the upcoming hook re-render,\n        // but the previous state will stay\n        // so we need to match the latest key and data (fallback to `initialData`)\n        get: function () {\n          stateDependencies.current.error = true;\n\n          if (config.suspense) {\n            return latestError;\n          }\n\n          return keyRef.current === key ? stateRef.current.error : initialError;\n        },\n        enumerable: true\n      },\n      data: {\n        get: function () {\n          stateDependencies.current.data = true;\n\n          if (config.suspense) {\n            return latestData;\n          }\n\n          return keyRef.current === key ? stateRef.current.data : initialData;\n        },\n        enumerable: true\n      },\n      isValidating: {\n        get: function () {\n          stateDependencies.current.isValidating = true;\n          return key ? stateRef.current.isValidating : false;\n        },\n        enumerable: true\n      }\n    });\n    return state; // `config.suspense` isn't allowed to change during the lifecycle.\n    // `boundMutate` is immutable, and the immutability of `revalidate` depends on `key`\n    // so we can omit them from the deps array,\n    // but we put it to enable react-hooks/exhaustive-deps rule.\n    // `initialData` and `initialError` are not initial values\n    // because they are changed during the lifecycle\n    // so we should add them in the deps array.\n  }, [revalidate, initialData, initialError, boundMutate, key, config.suspense, latestError, latestData]);\n  return memoizedState;\n}\n\nObject.defineProperty(SWRConfigContext.Provider, 'default', {\n  value: defaultConfig\n});\nvar SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;","map":{"version":3,"sources":["/Users/jshahcodes/projects/photopie-vercel/photopi/node_modules/swr/esm/use-swr.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","useCallback","useContext","useState","useRef","useMemo","useDebugValue","defaultConfig","cache","IS_SERVER","rAF","useIsomorphicLayoutEffect","SWRConfigContext","CONCURRENT_PROMISES","CONCURRENT_PROMISES_TS","FOCUS_REVALIDATORS","RECONNECT_REVALIDATORS","CACHE_REVALIDATORS","MUTATION_TS","MUTATION_END_TS","now","ts","revalidate_1","revalidators","isDocumentVisible","isOnline","key","registerOnFocus","registerOnReconnect","trigger","_key","shouldRevalidate","_a","serializeKey","keyErr","keyValidating","updaters","currentData","get","currentError","currentIsValidating","promises","i","all","broadcastState","data","error","isValidating","mutate","_data","beforeMutationTs","beforeConcurrentPromisesTs","isAsyncMutation","err_1","shouldAbort","_b","err","undefined","set","useSWR","_this","args","_i","arguments","config","Object","assign","fn","fetcher","fnArgs","configRef","current","willRevalidateOnMount","revalidateOnMount","initialData","resolveData","cachedData","resolveIsValidating","initialError","initialIsValidating","stateDependencies","stateRef","rerender","dispatch","payload","shouldUpdateState","k","unmountedRef","initialMountedRef","keyRef","eventsCallback","event","params","boundMutate","addRevalidator","callback","keyedRevalidators","index","indexOf","revalidate","revalidateOpts","retryCount","dedupe","loading","shouldDeduping","newData","startAt","newState","err_2","_c","isPaused","loadingTimeout","setTimeout","dedupingInterval","compare","shouldRetryOnError","isUpdating","currentHookData","latestKeyedData","softRevalidate","pending","onFocus","revalidateOnFocus","focusThrottleInterval","onReconnect","revalidateOnReconnect","onUpdate","updatedData","updatedError","updatedIsValidating","needUpdate","unsubFocus","unsubReconnect","unsubUpdate","timer","tick","refreshWhenHidden","refreshWhenOffline","refreshInterval","clearTimeout","latestData","latestError","suspense","memoizedState","state","defineProperties","enumerable","defineProperty","Provider","SWRConfig"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,IAAIO,WAAW,GAAI,QAAQ,KAAKA,WAAd,IAA8B,UAAUlB,OAAV,EAAmBmB,IAAnB,EAAyB;AACrE,MAAIC,CAAC,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,IAAI,EAAE,YAAW;AAAE,UAAIC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc,MAAMA,CAAC,CAAC,CAAD,CAAP;AAAY,aAAOA,CAAC,CAAC,CAAD,CAAR;AAAc,KAAvE;AAAyEC,IAAAA,IAAI,EAAE,EAA/E;AAAmFC,IAAAA,GAAG,EAAE;AAAxF,GAAR;AAAA,MAAsGC,CAAtG;AAAA,MAAyGC,CAAzG;AAAA,MAA4GJ,CAA5G;AAAA,MAA+GK,CAA/G;AACA,SAAOA,CAAC,GAAG;AAAEjB,IAAAA,IAAI,EAAEkB,IAAI,CAAC,CAAD,CAAZ;AAAiB,aAASA,IAAI,CAAC,CAAD,CAA9B;AAAmC,cAAUA,IAAI,CAAC,CAAD;AAAjD,GAAJ,EAA4D,OAAOC,MAAP,KAAkB,UAAlB,KAAiCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAW;AAAE,WAAO,IAAP;AAAc,GAAjF,CAA5D,EAAgJH,CAAvJ;;AACA,WAASC,IAAT,CAAcG,CAAd,EAAiB;AAAE,WAAO,UAAUC,CAAV,EAAa;AAAE,aAAOvB,IAAI,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,CAAX;AAAsB,KAA5C;AAA+C;;AAClE,WAASvB,IAAT,CAAcwB,EAAd,EAAkB;AACd,QAAIR,CAAJ,EAAO,MAAM,IAAIS,SAAJ,CAAc,iCAAd,CAAN;;AACP,WAAOf,CAAP,EAAU,IAAI;AACV,UAAIM,CAAC,GAAG,CAAJ,EAAOC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAYP,CAAC,CAAC,QAAD,CAAb,GAA0BO,EAAE,CAAC,CAAD,CAAF,GAAQP,CAAC,CAAC,OAAD,CAAD,KAAe,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAD,CAAN,KAAqBJ,CAAC,CAACa,IAAF,CAAOT,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAAChB,IAAjG,CAAD,IAA2G,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAF,CAAOT,CAAP,EAAUO,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBnB,IAA9I,EAAoJ,OAAOQ,CAAP;AACpJ,UAAII,CAAC,GAAG,CAAJ,EAAOJ,CAAX,EAAcW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAYX,CAAC,CAAClB,KAAd,CAAL;;AACd,cAAQ6B,EAAE,CAAC,CAAD,CAAV;AACI,aAAK,CAAL;AAAQ,aAAK,CAAL;AAAQX,UAAAA,CAAC,GAAGW,EAAJ;AAAQ;;AACxB,aAAK,CAAL;AAAQd,UAAAA,CAAC,CAACC,KAAF;AAAW,iBAAO;AAAEhB,YAAAA,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAX;AAAgBnB,YAAAA,IAAI,EAAE;AAAtB,WAAP;;AACnB,aAAK,CAAL;AAAQK,UAAAA,CAAC,CAACC,KAAF;AAAWM,UAAAA,CAAC,GAAGO,EAAE,CAAC,CAAD,CAAN;AAAWA,UAAAA,EAAE,GAAG,CAAC,CAAD,CAAL;AAAU;;AACxC,aAAK,CAAL;AAAQA,UAAAA,EAAE,GAAGd,CAAC,CAACK,GAAF,CAAMY,GAAN,EAAL;;AAAkBjB,UAAAA,CAAC,CAACI,IAAF,CAAOa,GAAP;;AAAc;;AACxC;AACI,cAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAN,EAAYD,CAAC,GAAGA,CAAC,CAACe,MAAF,GAAW,CAAX,IAAgBf,CAAC,CAACA,CAAC,CAACe,MAAF,GAAW,CAAZ,CAAnC,MAAuDJ,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;AAAEd,YAAAA,CAAC,GAAG,CAAJ;AAAO;AAAW;;AAC5G,cAAIc,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAACX,CAAD,IAAOW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAT,IAAgBW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUa,EAAE,CAAC,CAAD,CAAZ;AAAiB;AAAQ;;AACtF,cAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAed,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAA9B,EAAmC;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;AAAgBA,YAAAA,CAAC,GAAGW,EAAJ;AAAQ;AAAQ;;AACrE,cAAIX,CAAC,IAAIH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAApB,EAAyB;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;;AAAgBH,YAAAA,CAAC,CAACK,GAAF,CAAMc,IAAN,CAAWL,EAAX;;AAAgB;AAAQ;;AACnE,cAAIX,CAAC,CAAC,CAAD,CAAL,EAAUH,CAAC,CAACK,GAAF,CAAMY,GAAN;;AACVjB,UAAAA,CAAC,CAACI,IAAF,CAAOa,GAAP;;AAAc;AAXtB;;AAaAH,MAAAA,EAAE,GAAGf,IAAI,CAACiB,IAAL,CAAUpC,OAAV,EAAmBoB,CAAnB,CAAL;AACH,KAjBS,CAiBR,OAAOR,CAAP,EAAU;AAAEsB,MAAAA,EAAE,GAAG,CAAC,CAAD,EAAItB,CAAJ,CAAL;AAAae,MAAAA,CAAC,GAAG,CAAJ;AAAQ,KAjBzB,SAiBkC;AAAED,MAAAA,CAAC,GAAGH,CAAC,GAAG,CAAR;AAAY;;AAC1D,QAAIW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;AAAa,WAAO;AAAE7B,MAAAA,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;AAAiCnB,MAAAA,IAAI,EAAE;AAAvC,KAAP;AAC/B;AACJ,CA1BD,C,CA2BA;;;AACA,SAASyB,WAAT,EAAsBC,UAAtB,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoDC,OAApD,EAA6DC,aAA7D,QAAkF,OAAlF;AACA,OAAOC,aAAP,IAAwBC,KAAxB,QAAqC,UAArC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,yBAAzB,QAA0D,OAA1D;AACA,OAAOC,gBAAP,MAA6B,sBAA7B,C,CACA;;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAIC,sBAAsB,GAAG,EAA7B;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AACA,IAAIC,sBAAsB,GAAG,EAA7B;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,eAAe,GAAG,EAAtB,C,CACA;;AACA,IAAIC,GAAG,GAAI,YAAY;AACnB,MAAIC,EAAE,GAAG,CAAT;AACA,SAAO,YAAY;AAAE,WAAO,EAAEA,EAAT;AAAc,GAAnC;AACH,CAHS,EAAV,C,CAIA;;;AACA,IAAI,CAACZ,SAAL,EAAgB;AACZ,MAAIa,YAAY,GAAG,UAAUC,YAAV,EAAwB;AACvC,QAAI,CAAChB,aAAa,CAACiB,iBAAd,EAAD,IAAsC,CAACjB,aAAa,CAACkB,QAAd,EAA3C,EACI;;AACJ,SAAK,IAAIC,GAAT,IAAgBH,YAAhB,EAA8B;AAC1B,UAAIA,YAAY,CAACG,GAAD,CAAZ,CAAkB,CAAlB,CAAJ,EACIH,YAAY,CAACG,GAAD,CAAZ,CAAkB,CAAlB;AACP;AACJ,GAPD;;AAQA,MAAI,OAAOnB,aAAa,CAACoB,eAArB,KAAyC,UAA7C,EAAyD;AACrDpB,IAAAA,aAAa,CAACoB,eAAd,CAA8B,YAAY;AAAE,aAAOL,YAAY,CAACP,kBAAD,CAAnB;AAA0C,KAAtF;AACH;;AACD,MAAI,OAAOR,aAAa,CAACqB,mBAArB,KAA6C,UAAjD,EAA6D;AACzDrB,IAAAA,aAAa,CAACqB,mBAAd,CAAkC,YAAY;AAAE,aAAON,YAAY,CAACN,sBAAD,CAAnB;AAA8C,KAA9F;AACH;AACJ;;AACD,IAAIa,OAAO,GAAG,UAAUC,IAAV,EAAgBC,gBAAhB,EAAkC;AAC5C,MAAIA,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B,GADjB,CAE5C;AACA;;;AACA,MAAIC,EAAE,GAAGxB,KAAK,CAACyB,YAAN,CAAmBH,IAAnB,CAAT;AAAA,MAAmCJ,GAAG,GAAGM,EAAE,CAAC,CAAD,CAA3C;AAAA,MAAgDE,MAAM,GAAGF,EAAE,CAAC,CAAD,CAA3D;AAAA,MAAgEG,aAAa,GAAGH,EAAE,CAAC,CAAD,CAAlF;;AACA,MAAI,CAACN,GAAL,EACI,OAAO1D,OAAO,CAACD,OAAR,EAAP;AACJ,MAAIqE,QAAQ,GAAGnB,kBAAkB,CAACS,GAAD,CAAjC;;AACA,MAAIA,GAAG,IAAIU,QAAX,EAAqB;AACjB,QAAIC,WAAW,GAAG7B,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAlB;AACA,QAAIa,YAAY,GAAG/B,KAAK,CAAC8B,GAAN,CAAUJ,MAAV,CAAnB;AACA,QAAIM,mBAAmB,GAAGhC,KAAK,CAAC8B,GAAN,CAAUH,aAAV,CAA1B;AACA,QAAIM,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACrC,MAA7B,EAAqC,EAAE2C,CAAvC,EAA0C;AACtCD,MAAAA,QAAQ,CAACzC,IAAT,CAAcoC,QAAQ,CAACM,CAAD,CAAR,CAAYX,gBAAZ,EAA8BM,WAA9B,EAA2CE,YAA3C,EAAyDC,mBAAzD,EAA8EE,CAAC,GAAG,CAAlF,CAAd;AACH,KAPgB,CAQjB;;;AACA,WAAO1E,OAAO,CAAC2E,GAAR,CAAYF,QAAZ,EAAsBhE,IAAtB,CAA2B,YAAY;AAAE,aAAO+B,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAP;AAAwB,KAAjE,CAAP;AACH;;AACD,SAAO1D,OAAO,CAACD,OAAR,CAAgByC,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAhB,CAAP;AACH,CApBD;;AAqBA,IAAIkB,cAAc,GAAG,UAAUlB,GAAV,EAAemB,IAAf,EAAqBC,KAArB,EAA4BC,YAA5B,EAA0C;AAC3D,MAAIX,QAAQ,GAAGnB,kBAAkB,CAACS,GAAD,CAAjC;;AACA,MAAIA,GAAG,IAAIU,QAAX,EAAqB;AACjB,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACrC,MAA7B,EAAqC,EAAE2C,CAAvC,EAA0C;AACtCN,MAAAA,QAAQ,CAACM,CAAD,CAAR,CAAY,KAAZ,EAAmBG,IAAnB,EAAyBC,KAAzB,EAAgCC,YAAhC;AACH;AACJ;AACJ,CAPD;;AAQA,IAAIC,MAAM,GAAG,UAAUlB,IAAV,EAAgBmB,KAAhB,EAAuBlB,gBAAvB,EAAyC;AAClD,MAAIA,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAC7D,SAAOvE,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;AACjD,QAAIwE,EAAJ,EAAQN,GAAR,EAAaQ,MAAb,EAAqBgB,gBAArB,EAAuCC,0BAAvC,EAAmEN,IAAnE,EAAyEC,KAAzE,EAAgFM,eAAhF,EAAiGC,KAAjG,EAAwGC,WAAxG,EAAqHlB,QAArH,EAA+HK,QAA/H,EAAyIC,CAAzI;;AACA,WAAO/D,WAAW,CAAC,IAAD,EAAO,UAAU4E,EAAV,EAAc;AACnC,cAAQA,EAAE,CAACzE,KAAX;AACI,aAAK,CAAL;AACIkD,UAAAA,EAAE,GAAGxB,KAAK,CAACyB,YAAN,CAAmBH,IAAnB,CAAL,EAA+BJ,GAAG,GAAGM,EAAE,CAAC,CAAD,CAAvC,EAA4CE,MAAM,GAAGF,EAAE,CAAC,CAAD,CAAvD;AACA,cAAI,CAACN,GAAL,EACI,OAAO,CAAC;AAAE;AAAH,WAAP,CAHR,CAII;;AACA,cAAI,OAAOuB,KAAP,KAAiB,WAArB,EACI,OAAO,CAAC;AAAE;AAAH,YAAepB,OAAO,CAACC,IAAD,EAAOC,gBAAP,CAAtB,CACH;AADG,WAAP,CANR,CASI;;AACAb,UAAAA,WAAW,CAACQ,GAAD,CAAX,GAAmBN,GAAG,KAAK,CAA3B;AACAD,UAAAA,eAAe,CAACO,GAAD,CAAf,GAAuB,CAAvB;AACAwB,UAAAA,gBAAgB,GAAGhC,WAAW,CAACQ,GAAD,CAA9B;AACAyB,UAAAA,0BAA0B,GAAGrC,sBAAsB,CAACY,GAAD,CAAnD;AACA0B,UAAAA,eAAe,GAAG,KAAlB;;AACA,cAAIH,KAAK,IAAI,OAAOA,KAAP,KAAiB,UAA9B,EAA0C;AACtC;AACA,gBAAI;AACAA,cAAAA,KAAK,GAAGA,KAAK,CAACzC,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAD,CAAb;AACH,aAFD,CAGA,OAAO8B,GAAP,EAAY;AACR;AACAP,cAAAA,KAAK,GAAGQ,SAAR;AACAX,cAAAA,KAAK,GAAGU,GAAR;AACH;AACJ;;AACD,cAAI,EAAEP,KAAK,IAAI,OAAOA,KAAK,CAACxE,IAAb,KAAsB,UAAjC,CAAJ,EAAkD,OAAO,CAAC;AAAE;AAAH,YAAc,CAAd,CAAP,CA1BtD,CA2BI;;AACA2E,UAAAA,eAAe,GAAG,IAAlB;AACAG,UAAAA,EAAE,CAACzE,KAAH,GAAW,CAAX;;AACJ,aAAK,CAAL;AACIyE,UAAAA,EAAE,CAACtE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;AACA,iBAAO,CAAC;AAAE;AAAH,YAAciD,KAAd,CAAP;;AACJ,aAAK,CAAL;AACIJ,UAAAA,IAAI,GAAGU,EAAE,CAACxE,IAAH,EAAP;AACA,iBAAO,CAAC;AAAE;AAAH,YAAc,CAAd,CAAP;;AACJ,aAAK,CAAL;AACIsE,UAAAA,KAAK,GAAGE,EAAE,CAACxE,IAAH,EAAR;AACA+D,UAAAA,KAAK,GAAGO,KAAR;AACA,iBAAO,CAAC;AAAE;AAAH,YAAc,CAAd,CAAP;;AACJ,aAAK,CAAL;AAAQ,iBAAO,CAAC;AAAE;AAAH,YAAc,CAAd,CAAP;;AACR,aAAK,CAAL;AACIR,UAAAA,IAAI,GAAGI,KAAP;AACAM,UAAAA,EAAE,CAACzE,KAAH,GAAW,CAAX;;AACJ,aAAK,CAAL;AACIwE,UAAAA,WAAW,GAAG,YAAY;AACtB;AACA,gBAAIJ,gBAAgB,KAAKhC,WAAW,CAACQ,GAAD,CAAhC,IACAyB,0BAA0B,KAAKrC,sBAAsB,CAACY,GAAD,CADzD,EACgE;AAC5D,kBAAIoB,KAAJ,EACI,MAAMA,KAAN;AACJ,qBAAO,IAAP;AACH;AACJ,WARD,CADJ,CAUI;;;AACA,cAAIQ,WAAW,EAAf,EACI,OAAO,CAAC;AAAE;AAAH,YAAeT,IAAf,CAAP;;AACJ,cAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC7B;AACArC,YAAAA,KAAK,CAACkD,GAAN,CAAUhC,GAAV,EAAemB,IAAf;AACH,WAhBL,CAiBI;;;AACArC,UAAAA,KAAK,CAACkD,GAAN,CAAUxB,MAAV,EAAkBY,KAAlB,EAlBJ,CAmBI;;AACA3B,UAAAA,eAAe,CAACO,GAAD,CAAf,GAAuBN,GAAG,KAAK,CAA/B;;AACA,cAAI,CAACgC,eAAL,EAAsB;AAClB;AACA,gBAAIE,WAAW,EAAf,EACI,OAAO,CAAC;AAAE;AAAH,cAAeT,IAAf,CAAP;AACP;;AACDT,UAAAA,QAAQ,GAAGnB,kBAAkB,CAACS,GAAD,CAA7B;;AACA,cAAIU,QAAJ,EAAc;AACVK,YAAAA,QAAQ,GAAG,EAAX;;AACA,iBAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,QAAQ,CAACrC,MAAzB,EAAiC,EAAE2C,CAAnC,EAAsC;AAClCD,cAAAA,QAAQ,CAACzC,IAAT,CAAcoC,QAAQ,CAACM,CAAD,CAAR,CAAY,CAAC,CAACX,gBAAd,EAAgCc,IAAhC,EAAsCC,KAAtC,EAA6CW,SAA7C,EAAwDf,CAAC,GAAG,CAA5D,CAAd;AACH,aAJS,CAKV;;;AACA,mBAAO,CAAC;AAAE;AAAH,cAAe1E,OAAO,CAAC2E,GAAR,CAAYF,QAAZ,EAAsBhE,IAAtB,CAA2B,YAAY;AACrD,kBAAIqE,KAAJ,EACI,MAAMA,KAAN;AACJ,qBAAOtC,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAP;AACH,aAJiB,CAAf,CAAP;AAKH,WAtCL,CAuCI;;;AACA,cAAIoB,KAAJ,EACI,MAAMA,KAAN;AACJ,iBAAO,CAAC;AAAE;AAAH,YAAeD,IAAf,CAAP;AAvFR;AAyFH,KA1FiB,CAAlB;AA2FH,GA7Fe,CAAhB;AA8FH,CAhGD;;AAiGA,SAASc,MAAT,GAAkB;AACd,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAAChE,MAAhC,EAAwC+D,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;AACH;;AACD,MAAIhC,IAAI,GAAG+B,IAAI,CAAC,CAAD,CAAf;AACA,MAAIG,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3D,aAAlB,EAAiCL,UAAU,CAACU,gBAAD,CAA3C,EAA+DiD,IAAI,CAAC9D,MAAL,GAAc,CAAd,GACtE8D,IAAI,CAAC,CAAD,CADkE,GAEtEA,IAAI,CAAC9D,MAAL,KAAgB,CAAhB,IAAqB,OAAO8D,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAxC,GACIA,IAAI,CAAC,CAAD,CADR,GAEI,EAJG,CAAb,CAPc,CAYd;AACA;AACA;;AACA,MAAIM,EAAE,GAAIN,IAAI,CAAC9D,MAAL,GAAc,CAAd,GACJ8D,IAAI,CAAC,CAAD,CADA,GAEJA,IAAI,CAAC9D,MAAL,KAAgB,CAAhB,IAAqB,OAAO8D,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAxC,GACIA,IAAI,CAAC,CAAD,CADR;AAEI;AACd;AACA;AACA;AACgBA,EAAAA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAZ,GACMA,IAAI,CAAC,CAAD,CADV,GAEMG,MAAM,CAACI,OAVzB,CAfc,CA0Bd;AACA;AACA;AACA;;AACA,MAAIpC,EAAE,GAAGxB,KAAK,CAACyB,YAAN,CAAmBH,IAAnB,CAAT;AAAA,MAAmCJ,GAAG,GAAGM,EAAE,CAAC,CAAD,CAA3C;AAAA,MAAgDqC,MAAM,GAAGrC,EAAE,CAAC,CAAD,CAA3D;AAAA,MAAgEE,MAAM,GAAGF,EAAE,CAAC,CAAD,CAA3E;AAAA,MAAgFG,aAAa,GAAGH,EAAE,CAAC,CAAD,CAAlG;;AACA,MAAIsC,SAAS,GAAGlE,MAAM,CAAC4D,MAAD,CAAtB;AACArD,EAAAA,yBAAyB,CAAC,YAAY;AAClC2D,IAAAA,SAAS,CAACC,OAAV,GAAoBP,MAApB;AACH,GAFwB,CAAzB;;AAGA,MAAIQ,qBAAqB,GAAG,YAAY;AACpC,WAAQR,MAAM,CAACS,iBAAP,IACH,CAACT,MAAM,CAACU,WAAR,IAAuBV,MAAM,CAACS,iBAAP,KAA6BhB,SADzD;AAEH,GAHD;;AAIA,MAAIkB,WAAW,GAAG,YAAY;AAC1B,QAAIC,UAAU,GAAGpE,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAjB;AACA,WAAO,OAAOkD,UAAP,KAAsB,WAAtB,GAAoCZ,MAAM,CAACU,WAA3C,GAAyDE,UAAhE;AACH,GAHD;;AAIA,MAAIC,mBAAmB,GAAG,YAAY;AAClC,WAAO,CAAC,CAACrE,KAAK,CAAC8B,GAAN,CAAUH,aAAV,CAAF,IAA+BT,GAAG,IAAI8C,qBAAqB,EAAlE;AACH,GAFD;;AAGA,MAAIE,WAAW,GAAGC,WAAW,EAA7B;AACA,MAAIG,YAAY,GAAGtE,KAAK,CAAC8B,GAAN,CAAUJ,MAAV,CAAnB;AACA,MAAI6C,mBAAmB,GAAGF,mBAAmB,EAA7C,CAhDc,CAiDd;AACA;AACA;;AACA,MAAIG,iBAAiB,GAAG5E,MAAM,CAAC;AAC3ByC,IAAAA,IAAI,EAAE,KADqB;AAE3BC,IAAAA,KAAK,EAAE,KAFoB;AAG3BC,IAAAA,YAAY,EAAE;AAHa,GAAD,CAA9B;AAKA,MAAIkC,QAAQ,GAAG7E,MAAM,CAAC;AAClByC,IAAAA,IAAI,EAAE6B,WADY;AAElB5B,IAAAA,KAAK,EAAEgC,YAFW;AAGlB/B,IAAAA,YAAY,EAAEgC;AAHI,GAAD,CAArB,CAzDc,CA8Dd;;AACAzE,EAAAA,aAAa,CAAC2E,QAAQ,CAACV,OAAT,CAAiB1B,IAAlB,CAAb;AACA,MAAIqC,QAAQ,GAAG/E,QAAQ,CAAC,EAAD,CAAR,CAAa,CAAb,CAAf;AACA,MAAIgF,QAAQ,GAAGlF,WAAW,CAAC,UAAUmF,OAAV,EAAmB;AAC1C,QAAIC,iBAAiB,GAAG,KAAxB;;AACA,SAAK,IAAIC,CAAT,IAAcF,OAAd,EAAuB;AACnB;AACA,UAAIH,QAAQ,CAACV,OAAT,CAAiBe,CAAjB,MAAwBF,OAAO,CAACE,CAAD,CAAnC,EAAwC;AACpC;AACH,OAJkB,CAKnB;;;AACAL,MAAAA,QAAQ,CAACV,OAAT,CAAiBe,CAAjB,IAAsBF,OAAO,CAACE,CAAD,CAA7B,CANmB,CAOnB;;AACA,UAAIN,iBAAiB,CAACT,OAAlB,CAA0Be,CAA1B,CAAJ,EAAkC;AAC9BD,QAAAA,iBAAiB,GAAG,IAApB;AACH;AACJ;;AACD,QAAIA,iBAAJ,EAAuB;AACnB;AACA;AACA,UAAIE,YAAY,CAAChB,OAAb,IAAwB,CAACiB,iBAAiB,CAACjB,OAA/C,EACI;AACJW,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GArByB,EAsB1B;AACA;AACA,IAxB0B,CAA1B,CAjEc,CA0Fd;;AACA,MAAIK,YAAY,GAAGnF,MAAM,CAAC,KAAD,CAAzB;AACA,MAAIqF,MAAM,GAAGrF,MAAM,CAACsB,GAAD,CAAnB,CA5Fc,CA6Fd;;AACA,MAAI8D,iBAAiB,GAAGpF,MAAM,CAAC,KAAD,CAA9B,CA9Fc,CA+Fd;;AACA,MAAIsF,cAAc,GAAGzF,WAAW,CAAC,UAAU0F,KAAV,EAAiB;AAC9C,QAAI3D,EAAJ;;AACA,QAAI4D,MAAM,GAAG,EAAb;;AACA,SAAK,IAAI9B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAAChE,MAAhC,EAAwC+D,EAAE,EAA1C,EAA8C;AAC1C8B,MAAAA,MAAM,CAAC9B,EAAE,GAAG,CAAN,CAAN,GAAiBC,SAAS,CAACD,EAAD,CAA1B;AACH;;AACD,QAAIyB,YAAY,CAAChB,OAAjB,EACI;AACJ,QAAI,CAACiB,iBAAiB,CAACjB,OAAvB,EACI;AACJ,QAAI7C,GAAG,KAAK+D,MAAM,CAAClB,OAAnB,EACI,OAX0C,CAY9C;;AACA,KAACvC,EAAE,GAAGsC,SAAS,CAACC,OAAhB,EAAyBoB,KAAzB,EAAgCjH,KAAhC,CAAsCsD,EAAtC,EAA0C4D,MAA1C;AACH,GAd+B,EAc7B,CAAClE,GAAD,CAd6B,CAAhC;AAeA,MAAImE,WAAW,GAAG5F,WAAW,CAAC,UAAU4C,IAAV,EAAgBd,gBAAhB,EAAkC;AAC5D,WAAOiB,MAAM,CAACyC,MAAM,CAAClB,OAAR,EAAiB1B,IAAjB,EAAuBd,gBAAvB,CAAb;AACH,GAF4B,EAE1B,EAF0B,CAA7B;;AAGA,MAAI+D,cAAc,GAAG,UAAUvE,YAAV,EAAwBwE,QAAxB,EAAkC;AACnD,QAAI,CAACxE,YAAY,CAACG,GAAD,CAAjB,EAAwB;AACpBH,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoB,CAACqE,QAAD,CAApB;AACH,KAFD,MAGK;AACDxE,MAAAA,YAAY,CAACG,GAAD,CAAZ,CAAkB1B,IAAlB,CAAuB+F,QAAvB;AACH;;AACD,WAAO,YAAY;AACf,UAAIC,iBAAiB,GAAGzE,YAAY,CAACG,GAAD,CAApC;AACA,UAAIuE,KAAK,GAAGD,iBAAiB,CAACE,OAAlB,CAA0BH,QAA1B,CAAZ;;AACA,UAAIE,KAAK,IAAI,CAAb,EAAgB;AACZ;AACAD,QAAAA,iBAAiB,CAACC,KAAD,CAAjB,GACID,iBAAiB,CAACA,iBAAiB,CAACjG,MAAlB,GAA2B,CAA5B,CADrB;AAEAiG,QAAAA,iBAAiB,CAAClG,GAAlB;AACH;AACJ,KATD;AAUH,GAjBD,CAlHc,CAoId;;;AACA,MAAIqG,UAAU,GAAGlG,WAAW,CAAC,UAAUmG,cAAV,EAA0B;AACnD,QAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,MAAAA,cAAc,GAAG,EAAjB;AAAsB;;AACvD,WAAO5I,SAAS,CAACoG,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;AAChD,UAAI5B,EAAJ,EAAQqE,UAAR,EAAoB9C,EAApB,EAAwB+C,MAAxB,EAAgCC,OAAhC,EAAyCC,cAAzC,EAAyDC,OAAzD,EAAkEC,OAAlE,EAA2EC,QAA3E,EAAqFC,KAArF;;AACA,aAAOjI,WAAW,CAAC,IAAD,EAAO,UAAUkI,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAAC/H,KAAX;AACI,eAAK,CAAL;AACI,gBAAI,CAAC4C,GAAD,IAAQ,CAACyC,EAAb,EACI,OAAO,CAAC;AAAE;AAAH,cAAe,KAAf,CAAP;AACJ,gBAAIoB,YAAY,CAAChB,OAAjB,EACI,OAAO,CAAC;AAAE;AAAH,cAAe,KAAf,CAAP;AACJ,gBAAID,SAAS,CAACC,OAAV,CAAkBuC,QAAlB,EAAJ,EACI,OAAO,CAAC;AAAE;AAAH,cAAe,KAAf,CAAP;AACJ9E,YAAAA,EAAE,GAAGoE,cAAc,CAACC,UAApB,EAAgCA,UAAU,GAAGrE,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAAjE,EAAqEuB,EAAE,GAAG6C,cAAc,CAACE,MAAzF,EAAiGA,MAAM,GAAG/C,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAlI;AACAgD,YAAAA,OAAO,GAAG,IAAV;AACAC,YAAAA,cAAc,GAAG,OAAO3F,mBAAmB,CAACa,GAAD,CAA1B,KAAoC,WAApC,IAAmD4E,MAApE;AACAO,YAAAA,EAAE,CAAC/H,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI+H,YAAAA,EAAE,CAAC5H,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;AACAmF,YAAAA,QAAQ,CAAC;AACLpC,cAAAA,YAAY,EAAE;AADT,aAAD,CAAR;AAGAvC,YAAAA,KAAK,CAACkD,GAAN,CAAUvB,aAAV,EAAyB,IAAzB;;AACA,gBAAI,CAACqE,cAAL,EAAqB;AACjB;AACA5D,cAAAA,cAAc,CAAClB,GAAD,EAAMuD,QAAQ,CAACV,OAAT,CAAiB1B,IAAvB,EAA6BoC,QAAQ,CAACV,OAAT,CAAiBzB,KAA9C,EAAqD,IAArD,CAAd;AACH;;AACD2D,YAAAA,OAAO,GAAG,KAAK,CAAf;AACAC,YAAAA,OAAO,GAAG,KAAK,CAAf;AACA,gBAAI,CAACF,cAAL,EAAqB,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP,CAZzB,CAaI;AACA;;AACAE,YAAAA,OAAO,GAAG5F,sBAAsB,CAACY,GAAD,CAAhC;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcb,mBAAmB,CAACa,GAAD,CAAjC,CAAP;;AACJ,eAAK,CAAL;AACI+E,YAAAA,OAAO,GAAGI,EAAE,CAAC9H,IAAH,EAAV;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACJ,eAAK,CAAL;AACI;AACA;AACA,gBAAIiF,MAAM,CAAC+C,cAAP,IAAyB,CAACvG,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAA9B,EAA8C;AAC1CsF,cAAAA,UAAU,CAAC,YAAY;AACnB,oBAAIT,OAAJ,EACIb,cAAc,CAAC,eAAD,EAAkBhE,GAAlB,EAAuBsC,MAAvB,CAAd;AACP,eAHS,EAGPA,MAAM,CAAC+C,cAHA,CAAV;AAIH;;AACD,gBAAI1C,MAAM,KAAK,IAAf,EAAqB;AACjBxD,cAAAA,mBAAmB,CAACa,GAAD,CAAnB,GAA2ByC,EAAE,CAACzF,KAAH,CAAS,KAAK,CAAd,EAAiB2F,MAAjB,CAA3B;AACH,aAFD,MAGK;AACDxD,cAAAA,mBAAmB,CAACa,GAAD,CAAnB,GAA2ByC,EAAE,CAACzC,GAAD,CAA7B;AACH;;AACDZ,YAAAA,sBAAsB,CAACY,GAAD,CAAtB,GAA8BgF,OAAO,GAAGtF,GAAG,EAA3C;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcP,mBAAmB,CAACa,GAAD,CAAjC,CAAP;;AACJ,eAAK,CAAL;AACI+E,YAAAA,OAAO,GAAGI,EAAE,CAAC9H,IAAH,EAAV;AACAiI,YAAAA,UAAU,CAAC,YAAY;AACnB,qBAAOnG,mBAAmB,CAACa,GAAD,CAA1B;AACA,qBAAOZ,sBAAsB,CAACY,GAAD,CAA7B;AACH,aAHS,EAGPsC,MAAM,CAACiD,gBAHA,CAAV,CAFJ,CAMI;AACA;;AACAvB,YAAAA,cAAc,CAAC,WAAD,EAAce,OAAd,EAAuB/E,GAAvB,EAA4BsC,MAA5B,CAAd;AACA6C,YAAAA,EAAE,CAAC/H,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI;AACA;AACA;AACA;AACA;AACA,gBAAIgC,sBAAsB,CAACY,GAAD,CAAtB,GAA8BgF,OAAlC,EAA2C;AACvC,qBAAO,CAAC;AAAE;AAAH,gBAAe,KAAf,CAAP;AACH,aARL,CASI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAIxF,WAAW,CAACQ,GAAD,CAAX,MACA;AACCgF,YAAAA,OAAO,IAAIxF,WAAW,CAACQ,GAAD,CAAtB,IACG;AACAgF,YAAAA,OAAO,IAAIvF,eAAe,CAACO,GAAD,CAF7B,IAGG;AACAP,YAAAA,eAAe,CAACO,GAAD,CAAf,KAAyB,CAN7B,CAAJ,EAMqC;AACjCyD,cAAAA,QAAQ,CAAC;AAAEpC,gBAAAA,YAAY,EAAE;AAAhB,eAAD,CAAR;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAe,KAAf,CAAP;AACH;;AACDvC,YAAAA,KAAK,CAACkD,GAAN,CAAUxB,MAAV,EAAkBuB,SAAlB;AACAjD,YAAAA,KAAK,CAACkD,GAAN,CAAUvB,aAAV,EAAyB,KAAzB;AACAwE,YAAAA,QAAQ,GAAG;AACP5D,cAAAA,YAAY,EAAE;AADP,aAAX;;AAGA,gBAAI,OAAOkC,QAAQ,CAACV,OAAT,CAAiBzB,KAAxB,KAAkC,WAAtC,EAAmD;AAC/C;AACA6D,cAAAA,QAAQ,CAAC7D,KAAT,GAAiBW,SAAjB;AACH;;AACD,gBAAI,CAACO,MAAM,CAACkD,OAAP,CAAejC,QAAQ,CAACV,OAAT,CAAiB1B,IAAhC,EAAsC4D,OAAtC,CAAL,EAAqD;AACjD;AACA;AACAE,cAAAA,QAAQ,CAAC9D,IAAT,GAAgB4D,OAAhB;AACAjG,cAAAA,KAAK,CAACkD,GAAN,CAAUhC,GAAV,EAAe+E,OAAf;AACH,aA7CL,CA8CI;;;AACAtB,YAAAA,QAAQ,CAACwB,QAAD,CAAR;;AACA,gBAAI,CAACH,cAAL,EAAqB;AACjB;AACA5D,cAAAA,cAAc,CAAClB,GAAD,EAAM+E,OAAN,EAAeE,QAAQ,CAAC7D,KAAxB,EAA+B,KAA/B,CAAd;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACJ,eAAK,CAAL;AACI8D,YAAAA,KAAK,GAAGC,EAAE,CAAC9H,IAAH,EAAR;AACA,mBAAO8B,mBAAmB,CAACa,GAAD,CAA1B;AACA,mBAAOZ,sBAAsB,CAACY,GAAD,CAA7B;;AACA,gBAAI4C,SAAS,CAACC,OAAV,CAAkBuC,QAAlB,EAAJ,EAAkC;AAC9B3B,cAAAA,QAAQ,CAAC;AACLpC,gBAAAA,YAAY,EAAE;AADT,eAAD,CAAR;AAGA,qBAAO,CAAC;AAAE;AAAH,gBAAe,KAAf,CAAP;AACH;;AACDvC,YAAAA,KAAK,CAACkD,GAAN,CAAUxB,MAAV,EAAkB0E,KAAlB,EAVJ,CAWI;AACA;;AACA,gBAAI3B,QAAQ,CAACV,OAAT,CAAiBzB,KAAjB,KAA2B8D,KAA/B,EAAsC;AAClC;AACAzB,cAAAA,QAAQ,CAAC;AACLpC,gBAAAA,YAAY,EAAE,KADT;AAELD,gBAAAA,KAAK,EAAE8D;AAFF,eAAD,CAAR;;AAIA,kBAAI,CAACJ,cAAL,EAAqB;AACjB;AACA5D,gBAAAA,cAAc,CAAClB,GAAD,EAAM+B,SAAN,EAAiBmD,KAAjB,EAAwB,KAAxB,CAAd;AACH;AACJ,aAvBL,CAwBI;;;AACAlB,YAAAA,cAAc,CAAC,SAAD,EAAYkB,KAAZ,EAAmBlF,GAAnB,EAAwBsC,MAAxB,CAAd;;AACA,gBAAIA,MAAM,CAACmD,kBAAX,EAA+B;AAC3B;AACAzB,cAAAA,cAAc,CAAC,cAAD,EAAiBkB,KAAjB,EAAwBlF,GAAxB,EAA6BsC,MAA7B,EAAqCmC,UAArC,EAAiD;AAC3DE,gBAAAA,UAAU,EAAEA,UAAU,GAAG,CADkC;AAE3DC,gBAAAA,MAAM,EAAE;AAFmD,eAAjD,CAAd;AAIH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIC,YAAAA,OAAO,GAAG,KAAV;AACA,mBAAO,CAAC;AAAE;AAAH,cAAe,IAAf,CAAP;AApJR;AAsJH,OAvJiB,CAAlB;AAwJH,KA1Je,CAAhB;AA2JH,GA7J2B,EA8J5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAC7E,GAAD,CAxK4B,CAA5B,CArIc,CA8Sd;;AACAf,EAAAA,yBAAyB,CAAC,YAAY;AAClC,QAAI,CAACe,GAAL,EACI,OAAO+B,SAAP,CAF8B,CAGlC;;AACA8B,IAAAA,YAAY,CAAChB,OAAb,GAAuB,KAAvB;AACA,QAAI6C,UAAU,GAAG5B,iBAAiB,CAACjB,OAAnC;AACAiB,IAAAA,iBAAiB,CAACjB,OAAlB,GAA4B,IAA5B,CANkC,CAOlC;AACA;AACA;;AACA,QAAI8C,eAAe,GAAGpC,QAAQ,CAACV,OAAT,CAAiB1B,IAAvC;AACA,QAAIyE,eAAe,GAAG3C,WAAW,EAAjC,CAXkC,CAYlC;;AACAc,IAAAA,MAAM,CAAClB,OAAP,GAAiB7C,GAAjB;;AACA,QAAI,CAACsC,MAAM,CAACkD,OAAP,CAAeG,eAAf,EAAgCC,eAAhC,CAAL,EAAuD;AACnDnC,MAAAA,QAAQ,CAAC;AAAEtC,QAAAA,IAAI,EAAEyE;AAAR,OAAD,CAAR;AACH,KAhBiC,CAiBlC;;;AACA,QAAIC,cAAc,GAAG,YAAY;AAAE,aAAOpB,UAAU,CAAC;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAjB;AAAsC,KAAzE,CAlBkC,CAmBlC;;;AACA,QAAIc,UAAU,IAAI5C,qBAAqB,EAAvC,EAA2C;AACvC,UAAI,OAAO8C,eAAP,KAA2B,WAA3B,IAA0C,CAAC7G,SAA/C,EAA0D;AACtD;AACA;AACA;AACAC,QAAAA,GAAG,CAAC6G,cAAD,CAAH;AACH,OALD,MAMK;AACDA,QAAAA,cAAc;AACjB;AACJ;;AACD,QAAIC,OAAO,GAAG,KAAd;;AACA,QAAIC,OAAO,GAAG,YAAY;AACtB,UAAID,OAAO,IAAI,CAAClD,SAAS,CAACC,OAAV,CAAkBmD,iBAAlC,EACI;AACJF,MAAAA,OAAO,GAAG,IAAV;AACAD,MAAAA,cAAc;AACdP,MAAAA,UAAU,CAAC,YAAY;AAAE,eAAQQ,OAAO,GAAG,KAAlB;AAA2B,OAA1C,EAA4ClD,SAAS,CAACC,OAAV,CAAkBoD,qBAA9D,CAAV;AACH,KAND;;AAOA,QAAIC,WAAW,GAAG,YAAY;AAC1B,UAAItD,SAAS,CAACC,OAAV,CAAkBsD,qBAAtB,EAA6C;AACzCN,QAAAA,cAAc;AACjB;AACJ,KAJD,CAvCkC,CA4ClC;;;AACA,QAAIO,QAAQ,GAAG,UAAU/F,gBAAV,EAA4BgG,WAA5B,EAAyCC,YAAzC,EAAuDC,mBAAvD,EAA4E3B,MAA5E,EAAoF;AAC/F,UAAIvE,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,QAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAC7D,UAAIuE,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,QAAAA,MAAM,GAAG,IAAT;AAAgB,OAFsD,CAG/F;;;AACA,UAAIK,QAAQ,GAAG,EAAf;AACA,UAAIuB,UAAU,GAAG,KAAjB;;AACA,UAAI,OAAOH,WAAP,KAAuB,WAAvB,IACA,CAAC/D,MAAM,CAACkD,OAAP,CAAejC,QAAQ,CAACV,OAAT,CAAiB1B,IAAhC,EAAsCkF,WAAtC,CADL,EACyD;AACrDpB,QAAAA,QAAQ,CAAC9D,IAAT,GAAgBkF,WAAhB;AACAG,QAAAA,UAAU,GAAG,IAAb;AACH,OAV8F,CAW/F;AACA;;;AACA,UAAIjD,QAAQ,CAACV,OAAT,CAAiBzB,KAAjB,KAA2BkF,YAA/B,EAA6C;AACzCrB,QAAAA,QAAQ,CAAC7D,KAAT,GAAiBkF,YAAjB;AACAE,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAI,OAAOD,mBAAP,KAA+B,WAA/B,IACAhD,QAAQ,CAACV,OAAT,CAAiBxB,YAAjB,KAAkCkF,mBADtC,EAC2D;AACvDtB,QAAAA,QAAQ,CAAC5D,YAAT,GAAwBkF,mBAAxB;AACAC,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAIA,UAAJ,EAAgB;AACZ/C,QAAAA,QAAQ,CAACwB,QAAD,CAAR;AACH;;AACD,UAAI5E,gBAAJ,EAAsB;AAClB,YAAIuE,MAAJ,EAAY;AACR,iBAAOiB,cAAc,EAArB;AACH,SAFD,MAGK;AACD,iBAAOpB,UAAU,EAAjB;AACH;AACJ;;AACD,aAAO,KAAP;AACH,KAlCD;;AAmCA,QAAIgC,UAAU,GAAGrC,cAAc,CAAC/E,kBAAD,EAAqB0G,OAArB,CAA/B;AACA,QAAIW,cAAc,GAAGtC,cAAc,CAAC9E,sBAAD,EAAyB4G,WAAzB,CAAnC;AACA,QAAIS,WAAW,GAAGvC,cAAc,CAAC7E,kBAAD,EAAqB6G,QAArB,CAAhC;AACA,WAAO,YAAY;AACf;AACA3C,MAAAA,QAAQ,GAAG,YAAY;AAAE,eAAO,IAAP;AAAc,OAAvC,CAFe,CAGf;;;AACAI,MAAAA,YAAY,CAAChB,OAAb,GAAuB,IAAvB;AACA4D,MAAAA,UAAU;AACVC,MAAAA,cAAc;AACdC,MAAAA,WAAW;AACd,KARD;AASH,GA5FwB,EA4FtB,CAAC3G,GAAD,EAAMyE,UAAN,CA5FsB,CAAzB;AA6FAxF,EAAAA,yBAAyB,CAAC,YAAY;AAClC,QAAI2H,KAAK,GAAG,IAAZ;;AACA,QAAIC,IAAI,GAAG,YAAY;AAAE,aAAO/K,SAAS,CAACoG,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;AACzE,eAAOjF,WAAW,CAAC,IAAD,EAAO,UAAUqD,EAAV,EAAc;AACnC,kBAAQA,EAAE,CAAClD,KAAX;AACI,iBAAK,CAAL;AACI,kBAAI,EAAE,CAACmG,QAAQ,CAACV,OAAT,CAAiBzB,KAAlB,KACDwB,SAAS,CAACC,OAAV,CAAkBiE,iBAAlB,IACGlE,SAAS,CAACC,OAAV,CAAkB/C,iBAAlB,EAFF,MAGD8C,SAAS,CAACC,OAAV,CAAkBkE,kBAAlB,IAAwCnE,SAAS,CAACC,OAAV,CAAkB9C,QAAlB,EAHvC,CAAF,CAAJ,EAG6E,OAAO,CAAC;AAAE;AAAH,gBAAc,CAAd,CAAP,CAJjF,CAKI;AACA;AACA;;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAc0E,UAAU,CAAC;AAAEG,gBAAAA,MAAM,EAAE;AAAV,eAAD,CAAxB,CAAP;;AACJ,iBAAK,CAAL;AACI;AACA;AACA;AACAtE,cAAAA,EAAE,CAACjD,IAAH;;AACAiD,cAAAA,EAAE,CAAClD,KAAH,GAAW,CAAX;;AACJ,iBAAK,CAAL;AACI;AACA,kBAAIwF,SAAS,CAACC,OAAV,CAAkBmE,eAAlB,IAAqCJ,KAAzC,EAAgD;AAC5CA,gBAAAA,KAAK,GAAGtB,UAAU,CAACuB,IAAD,EAAOjE,SAAS,CAACC,OAAV,CAAkBmE,eAAzB,CAAlB;AACH;;AACD,qBAAO,CAAC;AAAE;AAAH,eAAP;AArBR;AAuBH,SAxBiB,CAAlB;AAyBH,OA1BwC,CAAhB;AA0BpB,KA1BL;;AA2BA,QAAIpE,SAAS,CAACC,OAAV,CAAkBmE,eAAtB,EAAuC;AACnCJ,MAAAA,KAAK,GAAGtB,UAAU,CAACuB,IAAD,EAAOjE,SAAS,CAACC,OAAV,CAAkBmE,eAAzB,CAAlB;AACH;;AACD,WAAO,YAAY;AACf,UAAIJ,KAAJ,EAAW;AACPK,QAAAA,YAAY,CAACL,KAAD,CAAZ;AACAA,QAAAA,KAAK,GAAG,IAAR;AACH;AACJ,KALD;AAMH,GAtCwB,EAsCtB,CACCtE,MAAM,CAAC0E,eADR,EAEC1E,MAAM,CAACwE,iBAFR,EAGCxE,MAAM,CAACyE,kBAHR,EAICtC,UAJD,CAtCsB,CAAzB,CA5Yc,CAwbd;;AACA,MAAIyC,UAAJ;AACA,MAAIC,WAAJ;;AACA,MAAI7E,MAAM,CAAC8E,QAAX,EAAqB;AACjB;AACA;AACA;AACAF,IAAAA,UAAU,GAAGpI,KAAK,CAAC8B,GAAN,CAAUZ,GAAV,CAAb;AACAmH,IAAAA,WAAW,GAAGrI,KAAK,CAAC8B,GAAN,CAAUJ,MAAV,CAAd;;AACA,QAAI,OAAO0G,UAAP,KAAsB,WAA1B,EAAuC;AACnCA,MAAAA,UAAU,GAAGlE,WAAb;AACH;;AACD,QAAI,OAAOmE,WAAP,KAAuB,WAA3B,EAAwC;AACpCA,MAAAA,WAAW,GAAG/D,YAAd;AACH;;AACD,QAAI,OAAO8D,UAAP,KAAsB,WAAtB,IACA,OAAOC,WAAP,KAAuB,WAD3B,EACwC;AACpC;AACA,UAAI,CAAChI,mBAAmB,CAACa,GAAD,CAAxB,EAA+B;AAC3B;AACA;AACA;AACAyE,QAAAA,UAAU;AACb;;AACD,UAAItF,mBAAmB,CAACa,GAAD,CAAnB,IACA,OAAOb,mBAAmB,CAACa,GAAD,CAAnB,CAAyBjD,IAAhC,KAAyC,UAD7C,EACyD;AACrD;AACA,cAAMoC,mBAAmB,CAACa,GAAD,CAAzB;AACH,OAZmC,CAapC;;;AACAkH,MAAAA,UAAU,GAAG/H,mBAAmB,CAACa,GAAD,CAAhC;AACH;;AACD,QAAI,OAAOkH,UAAP,KAAsB,WAAtB,IAAqCC,WAAzC,EAAsD;AAClD;AACA,YAAMA,WAAN;AACH;AACJ,GA5da,CA6dd;AACA;;;AACA,MAAIE,aAAa,GAAG1I,OAAO,CAAC,YAAY;AACpC;AACA;AACA;AACA,QAAI2I,KAAK,GAAG;AAAE7C,MAAAA,UAAU,EAAEA,UAAd;AAA0BnD,MAAAA,MAAM,EAAE6C;AAAlC,KAAZ;AACA5B,IAAAA,MAAM,CAACgF,gBAAP,CAAwBD,KAAxB,EAA+B;AAC3BlG,MAAAA,KAAK,EAAE;AACH;AACA;AACA;AACAR,QAAAA,GAAG,EAAE,YAAY;AACb0C,UAAAA,iBAAiB,CAACT,OAAlB,CAA0BzB,KAA1B,GAAkC,IAAlC;;AACA,cAAIkB,MAAM,CAAC8E,QAAX,EAAqB;AACjB,mBAAOD,WAAP;AACH;;AACD,iBAAOpD,MAAM,CAAClB,OAAP,KAAmB7C,GAAnB,GAAyBuD,QAAQ,CAACV,OAAT,CAAiBzB,KAA1C,GAAkDgC,YAAzD;AACH,SAVE;AAWHoE,QAAAA,UAAU,EAAE;AAXT,OADoB;AAc3BrG,MAAAA,IAAI,EAAE;AACFP,QAAAA,GAAG,EAAE,YAAY;AACb0C,UAAAA,iBAAiB,CAACT,OAAlB,CAA0B1B,IAA1B,GAAiC,IAAjC;;AACA,cAAImB,MAAM,CAAC8E,QAAX,EAAqB;AACjB,mBAAOF,UAAP;AACH;;AACD,iBAAOnD,MAAM,CAAClB,OAAP,KAAmB7C,GAAnB,GAAyBuD,QAAQ,CAACV,OAAT,CAAiB1B,IAA1C,GAAiD6B,WAAxD;AACH,SAPC;AAQFwE,QAAAA,UAAU,EAAE;AARV,OAdqB;AAwB3BnG,MAAAA,YAAY,EAAE;AACVT,QAAAA,GAAG,EAAE,YAAY;AACb0C,UAAAA,iBAAiB,CAACT,OAAlB,CAA0BxB,YAA1B,GAAyC,IAAzC;AACA,iBAAOrB,GAAG,GAAGuD,QAAQ,CAACV,OAAT,CAAiBxB,YAApB,GAAmC,KAA7C;AACH,SAJS;AAKVmG,QAAAA,UAAU,EAAE;AALF;AAxBa,KAA/B;AAgCA,WAAOF,KAAP,CArCoC,CAsCpC;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA7C0B,EA6CxB,CACC7C,UADD,EAECzB,WAFD,EAGCI,YAHD,EAICe,WAJD,EAKCnE,GALD,EAMCsC,MAAM,CAAC8E,QANR,EAOCD,WAPD,EAQCD,UARD,CA7CwB,CAA3B;AAuDA,SAAOG,aAAP;AACH;;AACD9E,MAAM,CAACkF,cAAP,CAAsBvI,gBAAgB,CAACwI,QAAvC,EAAiD,SAAjD,EAA4D;AACxDtL,EAAAA,KAAK,EAAEyC;AADiD,CAA5D;AAGA,IAAI8I,SAAS,GAAGzI,gBAAgB,CAACwI,QAAjC;AACA,SAASvH,OAAT,EAAkBmB,MAAlB,EAA0BqG,SAA1B;AACA,eAAe1F,MAAf","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n// TODO: use @ts-expect-error\nimport { useCallback, useContext, useState, useRef, useMemo, useDebugValue } from 'react';\nimport defaultConfig, { cache } from './config';\nimport { IS_SERVER, rAF, useIsomorphicLayoutEffect } from './env';\nimport SWRConfigContext from './swr-config-context';\n// global state managers\nvar CONCURRENT_PROMISES = {};\nvar CONCURRENT_PROMISES_TS = {};\nvar FOCUS_REVALIDATORS = {};\nvar RECONNECT_REVALIDATORS = {};\nvar CACHE_REVALIDATORS = {};\nvar MUTATION_TS = {};\nvar MUTATION_END_TS = {};\n// generate strictly increasing timestamps\nvar now = (function () {\n    var ts = 0;\n    return function () { return ++ts; };\n})();\n// setup DOM events listeners for `focus` and `reconnect` actions\nif (!IS_SERVER) {\n    var revalidate_1 = function (revalidators) {\n        if (!defaultConfig.isDocumentVisible() || !defaultConfig.isOnline())\n            return;\n        for (var key in revalidators) {\n            if (revalidators[key][0])\n                revalidators[key][0]();\n        }\n    };\n    if (typeof defaultConfig.registerOnFocus === 'function') {\n        defaultConfig.registerOnFocus(function () { return revalidate_1(FOCUS_REVALIDATORS); });\n    }\n    if (typeof defaultConfig.registerOnReconnect === 'function') {\n        defaultConfig.registerOnReconnect(function () { return revalidate_1(RECONNECT_REVALIDATORS); });\n    }\n}\nvar trigger = function (_key, shouldRevalidate) {\n    if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n    // we are ignoring the second argument which correspond to the arguments\n    // the fetcher will receive when key is an array\n    var _a = cache.serializeKey(_key), key = _a[0], keyErr = _a[2], keyValidating = _a[3];\n    if (!key)\n        return Promise.resolve();\n    var updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        var currentData = cache.get(key);\n        var currentError = cache.get(keyErr);\n        var currentIsValidating = cache.get(keyValidating);\n        var promises = [];\n        for (var i = 0; i < updaters.length; ++i) {\n            promises.push(updaters[i](shouldRevalidate, currentData, currentError, currentIsValidating, i > 0));\n        }\n        // return new updated value\n        return Promise.all(promises).then(function () { return cache.get(key); });\n    }\n    return Promise.resolve(cache.get(key));\n};\nvar broadcastState = function (key, data, error, isValidating) {\n    var updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        for (var i = 0; i < updaters.length; ++i) {\n            updaters[i](false, data, error, isValidating);\n        }\n    }\n};\nvar mutate = function (_key, _data, shouldRevalidate) {\n    if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var _a, key, keyErr, beforeMutationTs, beforeConcurrentPromisesTs, data, error, isAsyncMutation, err_1, shouldAbort, updaters, promises, i;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = cache.serializeKey(_key), key = _a[0], keyErr = _a[2];\n                    if (!key)\n                        return [2 /*return*/];\n                    // if there is no new data to update, let's just revalidate the key\n                    if (typeof _data === 'undefined')\n                        return [2 /*return*/, trigger(_key, shouldRevalidate)\n                            // update global timestamps\n                        ];\n                    // update global timestamps\n                    MUTATION_TS[key] = now() - 1;\n                    MUTATION_END_TS[key] = 0;\n                    beforeMutationTs = MUTATION_TS[key];\n                    beforeConcurrentPromisesTs = CONCURRENT_PROMISES_TS[key];\n                    isAsyncMutation = false;\n                    if (_data && typeof _data === 'function') {\n                        // `_data` is a function, call it passing current cache value\n                        try {\n                            _data = _data(cache.get(key));\n                        }\n                        catch (err) {\n                            // if `_data` function throws an error synchronously, it shouldn't be cached\n                            _data = undefined;\n                            error = err;\n                        }\n                    }\n                    if (!(_data && typeof _data.then === 'function')) return [3 /*break*/, 5];\n                    // `_data` is a promise\n                    isAsyncMutation = true;\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, _data];\n                case 2:\n                    data = _b.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    err_1 = _b.sent();\n                    error = err_1;\n                    return [3 /*break*/, 4];\n                case 4: return [3 /*break*/, 6];\n                case 5:\n                    data = _data;\n                    _b.label = 6;\n                case 6:\n                    shouldAbort = function () {\n                        // check if other mutations have occurred since we've started this mutation\n                        if (beforeMutationTs !== MUTATION_TS[key] ||\n                            beforeConcurrentPromisesTs !== CONCURRENT_PROMISES_TS[key]) {\n                            if (error)\n                                throw error;\n                            return true;\n                        }\n                    };\n                    // if there's a race we don't update cache or broadcast change, just return the data\n                    if (shouldAbort())\n                        return [2 /*return*/, data];\n                    if (typeof data !== 'undefined') {\n                        // update cached data\n                        cache.set(key, data);\n                    }\n                    // always update or reset the error\n                    cache.set(keyErr, error);\n                    // reset the timestamp to mark the mutation has ended\n                    MUTATION_END_TS[key] = now() - 1;\n                    if (!isAsyncMutation) {\n                        // we skip broadcasting if there's another mutation happened synchronously\n                        if (shouldAbort())\n                            return [2 /*return*/, data];\n                    }\n                    updaters = CACHE_REVALIDATORS[key];\n                    if (updaters) {\n                        promises = [];\n                        for (i = 0; i < updaters.length; ++i) {\n                            promises.push(updaters[i](!!shouldRevalidate, data, error, undefined, i > 0));\n                        }\n                        // return new updated value\n                        return [2 /*return*/, Promise.all(promises).then(function () {\n                                if (error)\n                                    throw error;\n                                return cache.get(key);\n                            })];\n                    }\n                    // throw error or return data to be used by caller of mutate\n                    if (error)\n                        throw error;\n                    return [2 /*return*/, data];\n            }\n        });\n    });\n};\nfunction useSWR() {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var _key = args[0];\n    var config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), args.length > 2\n        ? args[2]\n        : args.length === 2 && typeof args[1] === 'object'\n            ? args[1]\n            : {});\n    // in typescript args.length > 2 is not same as args.lenth === 3\n    // we do a safe type assertion here\n    // args.length === 3\n    var fn = (args.length > 2\n        ? args[1]\n        : args.length === 2 && typeof args[1] === 'function'\n            ? args[1]\n            : /**\n                  pass fn as null will disable revalidate\n                  https://paco.sh/blog/shared-hook-state-with-swr\n                */\n                args[1] === null\n                    ? args[1]\n                    : config.fetcher);\n    // we assume `key` as the identifier of the request\n    // `key` can change but `fn` shouldn't\n    // (because `revalidate` only depends on `key`)\n    // `keyErr` is the cache key for error objects\n    var _a = cache.serializeKey(_key), key = _a[0], fnArgs = _a[1], keyErr = _a[2], keyValidating = _a[3];\n    var configRef = useRef(config);\n    useIsomorphicLayoutEffect(function () {\n        configRef.current = config;\n    });\n    var willRevalidateOnMount = function () {\n        return (config.revalidateOnMount ||\n            (!config.initialData && config.revalidateOnMount === undefined));\n    };\n    var resolveData = function () {\n        var cachedData = cache.get(key);\n        return typeof cachedData === 'undefined' ? config.initialData : cachedData;\n    };\n    var resolveIsValidating = function () {\n        return !!cache.get(keyValidating) || (key && willRevalidateOnMount());\n    };\n    var initialData = resolveData();\n    var initialError = cache.get(keyErr);\n    var initialIsValidating = resolveIsValidating();\n    // if a state is accessed (data, error or isValidating),\n    // we add the state to dependencies so if the state is\n    // updated in the future, we can trigger a rerender\n    var stateDependencies = useRef({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    var stateRef = useRef({\n        data: initialData,\n        error: initialError,\n        isValidating: initialIsValidating\n    });\n    // display the data label in the React DevTools next to SWR hooks\n    useDebugValue(stateRef.current.data);\n    var rerender = useState({})[1];\n    var dispatch = useCallback(function (payload) {\n        var shouldUpdateState = false;\n        for (var k in payload) {\n            // @ts-ignore\n            if (stateRef.current[k] === payload[k]) {\n                continue;\n            }\n            // @ts-ignore\n            stateRef.current[k] = payload[k];\n            // @ts-ignore\n            if (stateDependencies.current[k]) {\n                shouldUpdateState = true;\n            }\n        }\n        if (shouldUpdateState) {\n            // if component is unmounted, should skip rerender\n            // if component is not mounted, should skip rerender\n            if (unmountedRef.current || !initialMountedRef.current)\n                return;\n            rerender({});\n        }\n    }, \n    // config.suspense isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // error ref inside revalidate (is last request errored?)\n    var unmountedRef = useRef(false);\n    var keyRef = useRef(key);\n    // check if component is mounted in suspense mode\n    var initialMountedRef = useRef(false);\n    // do unmount check for callbacks\n    var eventsCallback = useCallback(function (event) {\n        var _a;\n        var params = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            params[_i - 1] = arguments[_i];\n        }\n        if (unmountedRef.current)\n            return;\n        if (!initialMountedRef.current)\n            return;\n        if (key !== keyRef.current)\n            return;\n        // @ts-ignore\n        (_a = configRef.current)[event].apply(_a, params);\n    }, [key]);\n    var boundMutate = useCallback(function (data, shouldRevalidate) {\n        return mutate(keyRef.current, data, shouldRevalidate);\n    }, []);\n    var addRevalidator = function (revalidators, callback) {\n        if (!revalidators[key]) {\n            revalidators[key] = [callback];\n        }\n        else {\n            revalidators[key].push(callback);\n        }\n        return function () {\n            var keyedRevalidators = revalidators[key];\n            var index = keyedRevalidators.indexOf(callback);\n            if (index >= 0) {\n                // O(1): faster than splice\n                keyedRevalidators[index] =\n                    keyedRevalidators[keyedRevalidators.length - 1];\n                keyedRevalidators.pop();\n            }\n        };\n    };\n    // start a revalidation\n    var revalidate = useCallback(function (revalidateOpts) {\n        if (revalidateOpts === void 0) { revalidateOpts = {}; }\n        return __awaiter(_this, void 0, void 0, function () {\n            var _a, retryCount, _b, dedupe, loading, shouldDeduping, newData, startAt, newState, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!key || !fn)\n                            return [2 /*return*/, false];\n                        if (unmountedRef.current)\n                            return [2 /*return*/, false];\n                        if (configRef.current.isPaused())\n                            return [2 /*return*/, false];\n                        _a = revalidateOpts.retryCount, retryCount = _a === void 0 ? 0 : _a, _b = revalidateOpts.dedupe, dedupe = _b === void 0 ? false : _b;\n                        loading = true;\n                        shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && dedupe;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 6, , 7]);\n                        dispatch({\n                            isValidating: true\n                        });\n                        cache.set(keyValidating, true);\n                        if (!shouldDeduping) {\n                            // also update other hooks\n                            broadcastState(key, stateRef.current.data, stateRef.current.error, true);\n                        }\n                        newData = void 0;\n                        startAt = void 0;\n                        if (!shouldDeduping) return [3 /*break*/, 3];\n                        // there's already an ongoing request,\n                        // this one needs to be deduplicated.\n                        startAt = CONCURRENT_PROMISES_TS[key];\n                        return [4 /*yield*/, CONCURRENT_PROMISES[key]];\n                    case 2:\n                        newData = _c.sent();\n                        return [3 /*break*/, 5];\n                    case 3:\n                        // if no cache being rendered currently (it shows a blank page),\n                        // we trigger the loading slow event.\n                        if (config.loadingTimeout && !cache.get(key)) {\n                            setTimeout(function () {\n                                if (loading)\n                                    eventsCallback('onLoadingSlow', key, config);\n                            }, config.loadingTimeout);\n                        }\n                        if (fnArgs !== null) {\n                            CONCURRENT_PROMISES[key] = fn.apply(void 0, fnArgs);\n                        }\n                        else {\n                            CONCURRENT_PROMISES[key] = fn(key);\n                        }\n                        CONCURRENT_PROMISES_TS[key] = startAt = now();\n                        return [4 /*yield*/, CONCURRENT_PROMISES[key]];\n                    case 4:\n                        newData = _c.sent();\n                        setTimeout(function () {\n                            delete CONCURRENT_PROMISES[key];\n                            delete CONCURRENT_PROMISES_TS[key];\n                        }, config.dedupingInterval);\n                        // trigger the success event,\n                        // only do this for the original request.\n                        eventsCallback('onSuccess', newData, key, config);\n                        _c.label = 5;\n                    case 5:\n                        // if there're other ongoing request(s), started after the current one,\n                        // we need to ignore the current one to avoid possible race conditions:\n                        //   req1------------------>res1        (current one)\n                        //        req2---------------->res2\n                        // the request that fired later will always be kept.\n                        if (CONCURRENT_PROMISES_TS[key] > startAt) {\n                            return [2 /*return*/, false];\n                        }\n                        // if there're other mutations(s), overlapped with the current revalidation:\n                        // case 1:\n                        //   req------------------>res\n                        //       mutate------>end\n                        // case 2:\n                        //         req------------>res\n                        //   mutate------>end\n                        // case 3:\n                        //   req------------------>res\n                        //       mutate-------...---------->\n                        // we have to ignore the revalidation result (res) because it's no longer fresh.\n                        // meanwhile, a new revalidation should be triggered when the mutation ends.\n                        if (MUTATION_TS[key] &&\n                            // case 1\n                            (startAt <= MUTATION_TS[key] ||\n                                // case 2\n                                startAt <= MUTATION_END_TS[key] ||\n                                // case 3\n                                MUTATION_END_TS[key] === 0)) {\n                            dispatch({ isValidating: false });\n                            return [2 /*return*/, false];\n                        }\n                        cache.set(keyErr, undefined);\n                        cache.set(keyValidating, false);\n                        newState = {\n                            isValidating: false\n                        };\n                        if (typeof stateRef.current.error !== 'undefined') {\n                            // we don't have an error\n                            newState.error = undefined;\n                        }\n                        if (!config.compare(stateRef.current.data, newData)) {\n                            // deep compare to avoid extra re-render\n                            // data changed\n                            newState.data = newData;\n                            cache.set(key, newData);\n                        }\n                        // merge the new state\n                        dispatch(newState);\n                        if (!shouldDeduping) {\n                            // also update other hooks\n                            broadcastState(key, newData, newState.error, false);\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        err_2 = _c.sent();\n                        delete CONCURRENT_PROMISES[key];\n                        delete CONCURRENT_PROMISES_TS[key];\n                        if (configRef.current.isPaused()) {\n                            dispatch({\n                                isValidating: false\n                            });\n                            return [2 /*return*/, false];\n                        }\n                        cache.set(keyErr, err_2);\n                        // get a new error\n                        // don't use deep equal for errors\n                        if (stateRef.current.error !== err_2) {\n                            // we keep the stale data\n                            dispatch({\n                                isValidating: false,\n                                error: err_2\n                            });\n                            if (!shouldDeduping) {\n                                // also broadcast to update other hooks\n                                broadcastState(key, undefined, err_2, false);\n                            }\n                        }\n                        // events and retry\n                        eventsCallback('onError', err_2, key, config);\n                        if (config.shouldRetryOnError) {\n                            // when retrying, we always enable deduping\n                            eventsCallback('onErrorRetry', err_2, key, config, revalidate, {\n                                retryCount: retryCount + 1,\n                                dedupe: true\n                            });\n                        }\n                        return [3 /*break*/, 7];\n                    case 7:\n                        loading = false;\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    }, \n    // dispatch is immutable, and `eventsCallback`, `fnArgs`, `keyErr`, and `keyValidating` are based on `key`,\n    // so we can them from the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // useSWR('key', () => fetch('/api/'), { suspense: true })\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key]);\n    // mounted (client side rendering)\n    useIsomorphicLayoutEffect(function () {\n        if (!key)\n            return undefined;\n        // after `key` updates, we need to mark it as mounted\n        unmountedRef.current = false;\n        var isUpdating = initialMountedRef.current;\n        initialMountedRef.current = true;\n        // after the component is mounted (hydrated),\n        // we need to update the data from the cache\n        // and trigger a revalidation\n        var currentHookData = stateRef.current.data;\n        var latestKeyedData = resolveData();\n        // update the state if the key changed (not the inital render) or cache updated\n        keyRef.current = key;\n        if (!config.compare(currentHookData, latestKeyedData)) {\n            dispatch({ data: latestKeyedData });\n        }\n        // revalidate with deduping\n        var softRevalidate = function () { return revalidate({ dedupe: true }); };\n        // trigger a revalidation\n        if (isUpdating || willRevalidateOnMount()) {\n            if (typeof latestKeyedData !== 'undefined' && !IS_SERVER) {\n                // delay revalidate if there's cache\n                // to not block the rendering\n                // @ts-ignore it's safe to use requestAnimationFrame in browser\n                rAF(softRevalidate);\n            }\n            else {\n                softRevalidate();\n            }\n        }\n        var pending = false;\n        var onFocus = function () {\n            if (pending || !configRef.current.revalidateOnFocus)\n                return;\n            pending = true;\n            softRevalidate();\n            setTimeout(function () { return (pending = false); }, configRef.current.focusThrottleInterval);\n        };\n        var onReconnect = function () {\n            if (configRef.current.revalidateOnReconnect) {\n                softRevalidate();\n            }\n        };\n        // register global cache update listener\n        var onUpdate = function (shouldRevalidate, updatedData, updatedError, updatedIsValidating, dedupe) {\n            if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n            if (dedupe === void 0) { dedupe = true; }\n            // update hook state\n            var newState = {};\n            var needUpdate = false;\n            if (typeof updatedData !== 'undefined' &&\n                !config.compare(stateRef.current.data, updatedData)) {\n                newState.data = updatedData;\n                needUpdate = true;\n            }\n            // always update error\n            // because it can be `undefined`\n            if (stateRef.current.error !== updatedError) {\n                newState.error = updatedError;\n                needUpdate = true;\n            }\n            if (typeof updatedIsValidating !== 'undefined' &&\n                stateRef.current.isValidating !== updatedIsValidating) {\n                newState.isValidating = updatedIsValidating;\n                needUpdate = true;\n            }\n            if (needUpdate) {\n                dispatch(newState);\n            }\n            if (shouldRevalidate) {\n                if (dedupe) {\n                    return softRevalidate();\n                }\n                else {\n                    return revalidate();\n                }\n            }\n            return false;\n        };\n        var unsubFocus = addRevalidator(FOCUS_REVALIDATORS, onFocus);\n        var unsubReconnect = addRevalidator(RECONNECT_REVALIDATORS, onReconnect);\n        var unsubUpdate = addRevalidator(CACHE_REVALIDATORS, onUpdate);\n        return function () {\n            // cleanup\n            dispatch = function () { return null; };\n            // mark it as unmounted\n            unmountedRef.current = true;\n            unsubFocus();\n            unsubReconnect();\n            unsubUpdate();\n        };\n    }, [key, revalidate]);\n    useIsomorphicLayoutEffect(function () {\n        var timer = null;\n        var tick = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!stateRef.current.error &&\n                            (configRef.current.refreshWhenHidden ||\n                                configRef.current.isDocumentVisible()) &&\n                            (configRef.current.refreshWhenOffline || configRef.current.isOnline()))) return [3 /*break*/, 2];\n                        // only revalidate when the page is visible\n                        // if API request errored, we stop polling in this round\n                        // and let the error retry function handle it\n                        return [4 /*yield*/, revalidate({ dedupe: true })];\n                    case 1:\n                        // only revalidate when the page is visible\n                        // if API request errored, we stop polling in this round\n                        // and let the error retry function handle it\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // Read the latest refreshInterval\n                        if (configRef.current.refreshInterval && timer) {\n                            timer = setTimeout(tick, configRef.current.refreshInterval);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        if (configRef.current.refreshInterval) {\n            timer = setTimeout(tick, configRef.current.refreshInterval);\n        }\n        return function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n    }, [\n        config.refreshInterval,\n        config.refreshWhenHidden,\n        config.refreshWhenOffline,\n        revalidate\n    ]);\n    // suspense\n    var latestData;\n    var latestError;\n    if (config.suspense) {\n        // in suspense mode, we can't return empty state\n        // (it should be suspended)\n        // try to get data and error from cache\n        latestData = cache.get(key);\n        latestError = cache.get(keyErr);\n        if (typeof latestData === 'undefined') {\n            latestData = initialData;\n        }\n        if (typeof latestError === 'undefined') {\n            latestError = initialError;\n        }\n        if (typeof latestData === 'undefined' &&\n            typeof latestError === 'undefined') {\n            // need to start the request if it hasn't\n            if (!CONCURRENT_PROMISES[key]) {\n                // trigger revalidate immediately\n                // to get the promise\n                // in this revalidate, should not rerender\n                revalidate();\n            }\n            if (CONCURRENT_PROMISES[key] &&\n                typeof CONCURRENT_PROMISES[key].then === 'function') {\n                // if it is a promise\n                throw CONCURRENT_PROMISES[key];\n            }\n            // it's a value, return it directly (override)\n            latestData = CONCURRENT_PROMISES[key];\n        }\n        if (typeof latestData === 'undefined' && latestError) {\n            // in suspense mode, throw error if there's no content\n            throw latestError;\n        }\n    }\n    // define returned state\n    // can be memorized since the state is a ref\n    var memoizedState = useMemo(function () {\n        // revalidate will be deprecated in the 1.x release\n        // because mutate() covers the same use case of revalidate().\n        // This remains only for backward compatibility\n        var state = { revalidate: revalidate, mutate: boundMutate };\n        Object.defineProperties(state, {\n            error: {\n                // `key` might be changed in the upcoming hook re-render,\n                // but the previous state will stay\n                // so we need to match the latest key and data (fallback to `initialData`)\n                get: function () {\n                    stateDependencies.current.error = true;\n                    if (config.suspense) {\n                        return latestError;\n                    }\n                    return keyRef.current === key ? stateRef.current.error : initialError;\n                },\n                enumerable: true\n            },\n            data: {\n                get: function () {\n                    stateDependencies.current.data = true;\n                    if (config.suspense) {\n                        return latestData;\n                    }\n                    return keyRef.current === key ? stateRef.current.data : initialData;\n                },\n                enumerable: true\n            },\n            isValidating: {\n                get: function () {\n                    stateDependencies.current.isValidating = true;\n                    return key ? stateRef.current.isValidating : false;\n                },\n                enumerable: true\n            }\n        });\n        return state;\n        // `config.suspense` isn't allowed to change during the lifecycle.\n        // `boundMutate` is immutable, and the immutability of `revalidate` depends on `key`\n        // so we can omit them from the deps array,\n        // but we put it to enable react-hooks/exhaustive-deps rule.\n        // `initialData` and `initialError` are not initial values\n        // because they are changed during the lifecycle\n        // so we should add them in the deps array.\n    }, [\n        revalidate,\n        initialData,\n        initialError,\n        boundMutate,\n        key,\n        config.suspense,\n        latestError,\n        latestData\n    ]);\n    return memoizedState;\n}\nObject.defineProperty(SWRConfigContext.Provider, 'default', {\n    value: defaultConfig\n});\nvar SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;\n"]},"metadata":{},"sourceType":"module"}